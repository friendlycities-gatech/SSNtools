if ((node1[['lat']] == node2[['lat']]) & (node1[['lon']] == node2[['lon']])) {
return (TRUE)
} else {
return (FALSE)
}
}
#Determines if two edges are equal based on consisting of same two nodes in either direction
edgeEquals = function(edge1, edge2, nodes) {
if ((nodeEquals(nodes[[edge1[['Source']]]], nodes[[edge2[['Source']]]]) & nodeEquals(nodes[[edge1[['Target']]]], nodes[[edge2[['Target']]]])) |
(nodeEquals(nodes[[edge1[['Source']]]], nodes[[edge2[['Target']]]]) & nodeEquals(nodes[[edge1[['Target']]]], nodes[[edge2[['Source']]]]))) {
return (TRUE)
} else {
return (FALSE)
}
}
#Get Manhattan distance between two nodes
ManhattanDistance = function(node1, node2) {
return (abs(node1[['lat']] - node2[['lat']]) + abs(node1[['lon']] - node2[['lon']]))
}
#Get Euclidean distance between two nodes
euclidDistance = function(node1, node2) {
return (sqrt((node1[['lat']] - node2[['lat']]) ** 2 + (node1[['lon']]-node2[['lon']]) ** 2))
}
#Calculate midpoint of an edge
#edge is a 1*2 tibble that has source and target as node names. nodes is the full node list.
calculateMidpoint = function(edge, nodes) {
source = edge[['Source']]
target = edge[['Target']]
x = (max(nodes[[source]][['lat']], nodes[[target]][['lat']]) + min(nodes[[source]][['lat']], nodes[[target]][['lat']])) / 2
y = (max(nodes[[source]][['lon']], nodes[[target]][['lon']]) + min(nodes[[source]][['lon']], nodes[[target]][['lon']])) / 2
return(x,y)
}
#Get a certain number of the nearest neighbor hodes to a source node (can suggest increasing the number if numNeighbors > number)
nearestNeighbors = function(nodes, source, number) {
neighbors = list() #a particular structure to store tibble nodes #dict does not accept tibble as the key
distance_dict = {}
numNeighbors = 0
for (node in nodes) {
label = node[['label']]
if (node[['label']] != source[['label']]) {
distance = euclidDistance(source, node)
if (numNeighbors < number) {
temp = list()
temp[[label]] <- node
neighbors = append(neighbors, temp)
distance_dict[label] = distance
numNeighbors = numNeighbors + 1
} else {
for (neighbor in neighbors) {
neigh_label = neighbor[['label']]
if (distance < distance_dict[neigh_label]) {
neighbors = neighbors[names(neighbors) != neigh_label]
temp = list()
temp[[label]] <- node
neighbors = append(neighbors, temp)
distance_dict[label] = distance
break
}
}
}
}
}
return(neighbors) #a list of named lists
}
#Get the nearest neighbor to a source node that is not in the visited list
nearestUnvisitedNeighbor = function(nodes, visited, source) {
minNode = NULL
minDistance = -1
for (node in nodes) {
if (node[['label']] != source[['label']] & (!node[['label']] %in% names(visited))) {
distance = euclidDistance(source, node)
if (minDistance == -1 | distance < minDistance) {
minDistance = distance
minNode = node
}
}
}
return(minNode)
}
#Get all the nodes within a certain radius of a source node
nodesWithinRadius = function(nodes, source, radius) {
retNodes = list()
for (node in nodes) {
distance = euclidDistance(source, node)
if (distance < radius) {
label = node[['label']]
temp = list()
temp[[label]] <- node
retNodes = append(retNodes, temp)
}
}
return(retNodes)
}
numberNodesWithinRadius = function(nodes, source, radius) {
numNodes = 0
for (node in nodes) {
distance = euclidDistance(source, node)
if (distance < radius) {
numNodes = numNodes + 1
}
}
return (numNodes)
}
#Tests if an edge is fully within a radius of a given node
testEdgeInRange = function(nodes, edge, node, radius) {
edgeSource = edge[['Source']]
edgeTarget = edge[['Target']]
if (is.null(nodes[[edgeSource]]) | is.null(nodes[[edgeTarget]])) {
stop('Cannot find edge source or target in the node table. Please filter your edge table to contain edges that have corresponding nodes in the node table, or double check whether your node label column has the same values as edge source and target columns.')
} else {
if (euclidDistance(node, nodes[[edgeSource]]) < radius & euclidDistance(node, nodes[[edgeTarget]]) < radius) {
return (TRUE)
} else {
return (FALSE)
}
}
}
#Gets the number of edges within a radius of a given node
getNumEdgesInRange = function(nodes, edges, node, radius) {
retVal = 0
for (edge in edges) {
if (testEdgeInRange(nodes, edge, node, radius)) {
retVal = retVal + 1
}
}
return (retVal)
}
#Gets the list of edges within a radius of a given node
getEdgesInRange = function(nodes, edges, node, radius) {
retList = list()
for (edge in edges) {
if (testEdgeInRange(nodes, edge, node, radius)) {
retList[[length(retList) + 1]] = edge
}
}
return (retList)
}
#Tests if there is an edge between two given nodes
edgeExists = function(edges, nodes, node1, node2) {
edge2 = list('Source' = node1[['label']], 'Target' = node2[['label']])
for (edge in edges) {
if (edgeEquals(edge, edge2, nodes)) {
return (TRUE)
} else {
return (FALSE)
}
}
}
#Generates the adjacency matrix for a graph of nodes and edges
getAdjacencyMatrix = function(nodes, edges) {
dim = length(nodes)
adj = matrix(c(0), nrow=dim, ncol=dim)
i = 0
for (node in nodes) {
j = 0
for (node2 in nodes) {
if (edgeExists(edges, nodes, node, node2)) {
adj[i][j] = 1
adj[j][i] = 1
}
j = j + 1
}
}
for (i in 1:dim) {
adj[i][i] = 0
}
return (adj)
}
multiply = function(A, B, C) {
V = nrow(A)
for (i in 1:V) {
for (j in 1:V) {
C[i][j] = 0
for (k in 1:V) {
C[i][j] = C[i][j] + A[i][k] * B[k][j]
}
}
}
}
# Utility function to calculate trace of a matrix (sum of diagnonal elements)
getTrace = function(graph) {
V = nrow(graph)
trace = 0
for (i in 1:V) {
trace = trace + graph[i][i]
}
return (trace)
}
# Utility function for calculating number of triangles in graph
triangleInGraph = function(graph) {
V = nrow(graph)
aux2 = matrix(c(0), nrow=V, ncol=V)
aux3 = matrix(c(0), nrow=V, ncol=V)
# aux2 is graph^2 now printMatrix(aux2)
multiply(graph, graph, aux2)
# after this multiplication aux3 is
# graph^3 printMatrix(aux3)
multiply(graph, aux2, aux3)
trace = getTrace(aux3)
return (floor(trace / 6))
}
result = NDScanManhattan(nodes, edges, 1000, 4)
View(result)
result = NDScanManhattan(nodes, edges, 1000, 2)
nodes = processNode(NYCMafiaNodes, 'label', 'LonX', 'LatY')
edges = processEdge(NYCMafiaEdges, 'Source', 'Target')
result = NDScanManhattan(nodes, edges, 1000, 2)
library(SSNtools)
nodes = processNode(NYCMafiaNodes, 'label', 'LonX', 'LatY')
edges = processEdge(NYCMafiaEdges, 'Source', 'Target')
result = NDScanRadius(nodes, edges, 500)
result = NDScanManhattan(nodes, edges, 500, 3)
library(SSNtools)
nodes = processNode(NYCMafiaNodes, 'label', 'LonX', 'LatY')
edges = processEdge(NYCMafiaEdges, 'Source', 'Target')
result = NDScanManhattan(nodes, edges, 500, 3)
library(SSNtools)
nodes = processNode(NYCMafiaNodes, 'label', 'LonX', 'LatY')
edges = processEdge(NYCMafiaEdges, 'Source', 'Target')
result = NDScanManhattan(nodes, edges, 500, 3)
result = NDScanRadius(nodes, edges, 500, 3)
library(SSNtools)
nodes = processNode(NYCMafiaNodes, 'label', 'LonX', 'LatY')
edges = processEdge(NYCMafiaEdges, 'Source', 'Target')
result = NDScanManhattan(nodes, edges, 500, 3)
rmarkdown::render("README.Rmd")
rmarkdown::render("README.Rmd")
setwd('/Users/xiaofanliang/Dropbox (GaTech)/GT_Research/Edge_Scan/')
library(SSNtools)
library(tidyverse)
library(sf)
library(tmap)
library(basemaps)
MafiaNodes = MafiaNodes
MafiaEdges = MafiaEdges
library(igraph)
test = MafiaEdges %>% graph_from_data_frame(directed=TRUE) %>% as.undirected(mode=c('collapse'))
test2 = as.data.frame(get.edgelist(test))
test = NYCMafiaEdges %>% graph_from_data_frame(directed=TRUE) %>% as.undirected(mode=c('collapse'))
test2 = as.data.frame(get.edgelist(test))
NYCMafiaEdges = NYCMafiaEdges
test = NYCMafiaEdges %>% graph_from_data_frame(directed=TRUE) %>% as.undirected(mode=c('collapse'))
test2 = as.data.frame(get.edgelist(test))
MafiaNodes = MafiaNodes
MafiaEdges = MafiaEdges
test = MafiaEdges %>% graph_from_data_frame(directed=TRUE) %>% as.undirected(mode=c('collapse'))
test2 = as.data.frame(get.edgelist(test))
View(test2)
MafiaEdges = test2 %>% rename(Source = V1, Target = V2)
View(MafiaEdges)
#http://gis.mtu.edu/?p=117#:~:text=Spatial%20data%20provided%20by%20the,and%20usable%20only%20in%E2%80%94Michigan.
DTMafiaNodes = MafiaNodes %>% filter(Family == 'Detroit') %>%
st_as_sf(coords=c('LonX', 'LatY'), crs=4326) %>%
st_transform(crs="ESRI:102123") %>%
mutate(LonX = st_coordinates(.)[,1],
LatY = st_coordinates(.)[,2]) %>%
st_drop_geometry() %>%
select(c(NODE, LonX, LatY)) %>%
filter(!NODE %in% c('LOMBARDO-PIETRO', 'ORLANDO-CALOGERO', 'MASSEI-JOSEPH', 'PALAZZOLO-SALVATORE')) %>%
rename(label = NODE)
DTMafiaEdges = MafiaEdges %>% filter((Source %in% DTMafiaNodes$label) & (Target %in% DTMafiaNodes$label))
#!!!! If label is named differently, DTedges will not work. Need to check!!
DTnodes = processNode(DTMafiaNodes, 'label', 'LonX', 'LatY')
DTedges = processEdge(DTMafiaEdges, 'Source', 'Target')
#NDScan
dist = 1000
minPnts = 3
result = NDScanRadius(DTnodes, DTedges, dist, min=minPnts)
View(result)
write.csv(MafiaEdges, file='GitHub/SSNtools/data-raw/MafiaEdges.csv', row.names=FALSE)
library(SSNtools)
nodes <- processNode(NYCMafiaNodes, 'label', 'LonX', 'LatY')
edges <- processEdge(NYCMafiaEdges, 'Source', 'Target')
result <- edgeScanRadius(nodes, edges, 500)
sum(result$heat)
sum(result$heat, na.rm=T)
View(result)
result2 <- NDScanRadius(nodes, edges, 500)
sum(result2$heat, na.rm = T)
rmarkdown::render("README.Rmd")
rmarkdown::render("README.Rmd")
devtools::install_github("friendlycities-gatech/SSNtools")
setwd('/Users/xiaofanliang/Dropbox (GaTech)/GT_Research/Edge_Scan/')
library(SSNtools)
library(tidyverse)
library(sf)
library(tmap)
library(basemaps)
NYCMafiaNodes = NYCMafiaNodes
NYCMafiaEdges = NYCMafiaEdges
nodes = processNode(NYCMafiaNodes, 'label', 'LonX', 'LatY')
edges = processEdge(NYCMafiaEdges, 'Source', 'Target')
minPnts = 3
edgeScanMean = c()
edgeScanVar = c()
NDScanMean = c()
NDScanVar = c()
edgeScanNA = c()
edgeScanPctNA = c()
NDScanNA = c()
NDScanPctNA = c()
neighborhood = c('Euclid 0.5km', 'Manhattan 0.5km', 'Euclid 1km', 'Manhattan 1km', 'Euclid 2km', 'Manhattan 2km')
for (dist in c(500, 1000, 2000)) {
ND_Euclidresult = NDScanRadius(nodes, edges, dist, min=minPnts)
ND_Manhattanresult = NDScanManhattan(nodes, edges, dist, min=minPnts)
Edge_Euclidresult = edgeScanRadius(nodes, edges, dist, min=minPnts)
Edge_Manhattanresult = edgeScanManhattan(nodes, edges, dist, min=minPnts)
edgeScanMean = c(edgeScanMean, mean(Edge_Euclidresult$heat, na.rm=T), mean(Edge_Manhattanresult$heat, na.rm=T))
edgeScanVar = c(edgeScanVar, sd(Edge_Euclidresult$heat, na.rm=T), sd(Edge_Manhattanresult$heat, na.rm=T))
NDScanMean = c(NDScanMean, mean(ND_Euclidresult$heat, na.rm=T), mean(ND_Manhattanresult$heat, na.rm=T))
NDScanVar = c(NDScanVar, sd(ND_Euclidresult$heat, na.rm=T), sd(ND_Manhattanresult$heat, na.rm=T))
edgeScanNA = c(edgeScanNA, nrow(Edge_Euclidresult %>% drop_na(heat)), nrow(Edge_Manhattanresult %>% drop_na(heat)))
edgeScanPctNA = c(edgeScanPctNA, nrow(Edge_Euclidresult %>% drop_na(heat))/nrow(Edge_Euclidresult),
nrow(Edge_Manhattanresult %>% drop_na(heat))/nrow(Edge_Manhattanresult))
NDScanNA = c(NDScanNA, nrow(ND_Euclidresult %>% drop_na(heat)), nrow(ND_Euclidresult %>% drop_na(heat)))
NDScanPctNA = c(NDScanPctNA, nrow(ND_Euclidresult %>% drop_na(heat))/nrow(ND_Euclidresult),
nrow(ND_Manhattanresult %>% drop_na(heat))/nrow(ND_Manhattanresult))
}
kk = data.frame(neigh = neighborhood, EdgeScanMean = edgeScanMean, EdgeScanVar = edgeScanVar,
EdgeScanNA = edgeScanNA, EdgeScanPctNA = edgeScanPctNA,
NDScanMean = NDScanMean, NDScanVar = NDScanVar, NDScanNA = NDScanNA, NDScanPctNA = NDScanPctNA)
View(kk)
View(kk)
NDScanManhattan(nodes, edges, 5000) %>% drop_na(heat) %>% nrow()
NDScanRadius(nodes, edges, 5000) %>% drop_na(heat) %>% nrow()
setwd('/Users/xiaofanliang/Dropbox (GaTech)/GT_Research/Edge_Scan/')
library(SSNtools)
library(tidyverse)
library(sf)
library(tmap)
library(basemaps)
devtools::install_github("friendlycities-gatech/SSNtools")
library(SSNtools)
NYCMafiaNodes = NYCMafiaNodes
NYCMafiaEdges = NYCMafiaEdges
nodes = processNode(NYCMafiaNodes, 'label', 'LonX', 'LatY')
edges = processEdge(NYCMafiaEdges, 'Source', 'Target')
setwd('/Users/xiaofanliang/Dropbox (GaTech)/GT_Research/Edge_Scan/')
library(SSNtools)
library(tidyverse)
library(sf)
library(tmap)
library(basemaps)
NYCMafiaNodes = NYCMafiaNodes
NYCMafiaEdges = NYCMafiaEdges
nodes = processNode(NYCMafiaNodes, 'label', 'LonX', 'LatY')
edges = processEdge(NYCMafiaEdges, 'Source', 'Target')
NDScanManhattan(nodes, edges, 5000) %>% drop_na(heat) %>% nrow()
minPnts = 3
edgeScanMean = c()
edgeScanVar = c()
NDScanMean = c()
NDScanVar = c()
edgeScanNA = c()
edgeScanPctNA = c()
NDScanNA = c()
NDScanPctNA = c()
neighborhood = c('Euclid 0.5km', 'Manhattan 0.5km', 'Euclid 1km', 'Manhattan 1km', 'Euclid 2km', 'Manhattan 2km')
for (dist in c(500, 1000, 2000)) {
ND_Euclidresult = NDScanRadius(nodes, edges, dist, min=minPnts)
ND_Manhattanresult = NDScanManhattan(nodes, edges, dist, min=minPnts)
Edge_Euclidresult = edgeScanRadius(nodes, edges, dist, min=minPnts)
Edge_Manhattanresult = edgeScanManhattan(nodes, edges, dist, min=minPnts)
edgeScanMean = c(edgeScanMean, mean(Edge_Euclidresult$heat, na.rm=T), mean(Edge_Manhattanresult$heat, na.rm=T))
edgeScanVar = c(edgeScanVar, sd(Edge_Euclidresult$heat, na.rm=T), sd(Edge_Manhattanresult$heat, na.rm=T))
NDScanMean = c(NDScanMean, mean(ND_Euclidresult$heat, na.rm=T), mean(ND_Manhattanresult$heat, na.rm=T))
NDScanVar = c(NDScanVar, sd(ND_Euclidresult$heat, na.rm=T), sd(ND_Manhattanresult$heat, na.rm=T))
edgeScanNA = c(edgeScanNA, nrow(Edge_Euclidresult %>% drop_na(heat)), nrow(Edge_Manhattanresult %>% drop_na(heat)))
edgeScanPctNA = c(edgeScanPctNA, nrow(Edge_Euclidresult %>% drop_na(heat))/nrow(Edge_Euclidresult),
nrow(Edge_Manhattanresult %>% drop_na(heat))/nrow(Edge_Manhattanresult))
NDScanNA = c(NDScanNA, nrow(ND_Euclidresult %>% drop_na(heat)), nrow(ND_Euclidresult %>% drop_na(heat)))
NDScanPctNA = c(NDScanPctNA, nrow(ND_Euclidresult %>% drop_na(heat))/nrow(ND_Euclidresult),
nrow(ND_Manhattanresult %>% drop_na(heat))/nrow(ND_Manhattanresult))
}
kk = data.frame(neigh = neighborhood, EdgeScanMean = edgeScanMean, EdgeScanVar = edgeScanVar,
EdgeScanNA = edgeScanNA, EdgeScanPctNA = edgeScanPctNA,
NDScanMean = NDScanMean, NDScanVar = NDScanVar, NDScanNA = NDScanNA, NDScanPctNA = NDScanPctNA)
setwd('/Users/xiaofanliang/Dropbox (GaTech)/GT_Research/Edge_Scan/')
library(SSNtools)
library(tidyverse)
library(sf)
library(tmap)
library(basemaps)
NYCMafiaNodes = NYCMafiaNodes
NYCMafiaEdges = NYCMafiaEdges
nodes = processNode(NYCMafiaNodes, 'label', 'LonX', 'LatY')
edges = processEdge(NYCMafiaEdges, 'Source', 'Target')
minPnts = 3
edgeScanMean = c()
edgeScanVar = c()
NDScanMean = c()
NDScanVar = c()
edgeScanNA = c()
edgeScanPctNA = c()
NDScanNA = c()
NDScanPctNA = c()
neighborhood = c('Euclid 0.5km', 'Manhattan 0.5km', 'Euclid 1km', 'Manhattan 1km', 'Euclid 2km', 'Manhattan 2km')
for (dist in c(500, 1000, 2000)) {
ND_Euclidresult = NDScanRadius(nodes, edges, dist, min=minPnts)
ND_Manhattanresult = NDScanManhattan(nodes, edges, dist, min=minPnts)
Edge_Euclidresult = edgeScanRadius(nodes, edges, dist, min=minPnts)
Edge_Manhattanresult = edgeScanManhattan(nodes, edges, dist, min=minPnts)
edgeScanMean = c(edgeScanMean, mean(Edge_Euclidresult$heat, na.rm=T), mean(Edge_Manhattanresult$heat, na.rm=T))
edgeScanVar = c(edgeScanVar, sd(Edge_Euclidresult$heat, na.rm=T), sd(Edge_Manhattanresult$heat, na.rm=T))
NDScanMean = c(NDScanMean, mean(ND_Euclidresult$heat, na.rm=T), mean(ND_Manhattanresult$heat, na.rm=T))
NDScanVar = c(NDScanVar, sd(ND_Euclidresult$heat, na.rm=T), sd(ND_Manhattanresult$heat, na.rm=T))
edgeScanNA = c(edgeScanNA, nrow(Edge_Euclidresult %>% drop_na(heat)), nrow(Edge_Manhattanresult %>% drop_na(heat)))
edgeScanPctNA = c(edgeScanPctNA, nrow(Edge_Euclidresult %>% drop_na(heat))/nrow(Edge_Euclidresult),
nrow(Edge_Manhattanresult %>% drop_na(heat))/nrow(Edge_Manhattanresult))
NDScanNA = c(NDScanNA, nrow(ND_Euclidresult %>% drop_na(heat)), nrow(ND_Euclidresult %>% drop_na(heat)))
NDScanPctNA = c(NDScanPctNA, nrow(ND_Euclidresult %>% drop_na(heat))/nrow(ND_Euclidresult),
nrow(ND_Manhattanresult %>% drop_na(heat))/nrow(ND_Manhattanresult))
}
kk = data.frame(neigh = neighborhood, EdgeScanMean = edgeScanMean, EdgeScanVar = edgeScanVar,
EdgeScanNA = edgeScanNA, EdgeScanPctNA = edgeScanPctNA,
NDScanMean = NDScanMean, NDScanVar = NDScanVar, NDScanNA = NDScanNA, NDScanPctNA = NDScanPctNA)
View(kk)
NDScanManhattan(nodes, edges, 5000) %>% drop_na(heat) %>% nrow()
kk = data.frame(neigh = neighborhood, EdgeScanMean = round(edgeScanMean, 2), EdgeScanVar = round(edgeScanVar, 2),
EdgeScanNA = edgeScanNA, EdgeScanPctNA = round(edgeScanPctNA, 2),
ND_ScanMean = round(NDScanMean, 2), ND_ScanVar = round(NDScanVar, 2),
ND_ScanNA = NDScanNA, ND_ScanPctNA = round(NDScanPctNA, 2))
minPnts = 3
edgeScanMean = c()
edgeScanVar = c()
NDScanMean = c()
NDScanVar = c()
edgeScanNA = c()
edgeScanPctNA = c()
NDScanNA = c()
NDScanPctNA = c()
neighborhood = c('Euclid 0.5km', 'Manhattan 0.5km', 'Euclid 1km', 'Manhattan 1km', 'Euclid 2km', 'Manhattan 2km',
'KNN (K = 10)', 'KNN (K = 15)', 'KNN (K = 20)')
for (dist in c(500, 1000, 2000)) {
ND_Euclidresult = NDScanRadius(nodes, edges, dist, min=minPnts)
ND_Manhattanresult = NDScanManhattan(nodes, edges, dist, min=minPnts)
Edge_Euclidresult = edgeScanRadius(nodes, edges, dist, min=minPnts)
Edge_Manhattanresult = edgeScanManhattan(nodes, edges, dist, min=minPnts)
edgeScanMean = c(edgeScanMean, mean(Edge_Euclidresult$heat, na.rm=T), mean(Edge_Manhattanresult$heat, na.rm=T))
edgeScanVar = c(edgeScanVar, sd(Edge_Euclidresult$heat, na.rm=T), sd(Edge_Manhattanresult$heat, na.rm=T))
NDScanMean = c(NDScanMean, mean(ND_Euclidresult$heat, na.rm=T), mean(ND_Manhattanresult$heat, na.rm=T))
NDScanVar = c(NDScanVar, sd(ND_Euclidresult$heat, na.rm=T), sd(ND_Manhattanresult$heat, na.rm=T))
edgeScanNA = c(edgeScanNA, nrow(Edge_Euclidresult %>% drop_na(heat)), nrow(Edge_Manhattanresult %>% drop_na(heat)))
edgeScanPctNA = c(edgeScanPctNA, nrow(Edge_Euclidresult %>% drop_na(heat))/nrow(Edge_Euclidresult),
nrow(Edge_Manhattanresult %>% drop_na(heat))/nrow(Edge_Manhattanresult))
NDScanNA = c(NDScanNA, nrow(ND_Euclidresult %>% drop_na(heat)), nrow(ND_Euclidresult %>% drop_na(heat)))
NDScanPctNA = c(NDScanPctNA, nrow(ND_Euclidresult %>% drop_na(heat))/nrow(ND_Euclidresult),
nrow(ND_Manhattanresult %>% drop_na(heat))/nrow(ND_Manhattanresult))
}
for (k in c(10, 15, 20)) {
ND_KNNresult = NDScanKNearest(nodes, edges, k)
Edge_KNNresult = edgeScanKNearest(nodes, edges, k)
edgeScanMean = c(edgeScanMean, mean(Edge_KNNresult$heat, na.rm=T))
edgeScanVar = c(edgeScanVar, sd(Edge_KNNresult$heat, na.rm=T))
NDScanMean = c(NDScanMean, mean(ND_KNNresult$heat, na.rm=T))
NDScanVar = c(NDScanVar, sd(ND_KNNresult$heat, na.rm=T))
edgeScanNA = c(edgeScanNA, nrow(Edge_KNNresult %>% drop_na(heat)))
edgeScanPctNA = c(edgeScanPctNA, nrow(Edge_KNNresult %>% drop_na(heat))/nrow(Edge_KNNresult))
NDScanNA = c(NDScanNA, nrow(ND_KNNresult %>% drop_na(heat)))
NDScanPctNA = c(NDScanPctNA, nrow(ND_KNNresult %>% drop_na(heat))/nrow(ND_KNNresult))
}
kk = data.frame(neigh = neighborhood, EdgeScanMean = round(edgeScanMean, 2), EdgeScanVar = round(edgeScanVar, 2),
EdgeScanNA = edgeScanNA, EdgeScanPctNA = round(edgeScanPctNA, 2),
ND_ScanMean = round(NDScanMean, 2), ND_ScanVar = round(NDScanVar, 2),
ND_ScanNA = NDScanNA, ND_ScanPctNA = round(NDScanPctNA, 2))
minPnts = 3
edgeScanMean = c()
edgeScanVar = c()
NDScanMean = c()
NDScanVar = c()
edgeScanNA = c()
edgeScanPctNA = c()
NDScanNA = c()
NDScanPctNA = c()
neighborhood = c('Euclid 0.5km', 'Manhattan 0.5km', 'Euclid 1km', 'Manhattan 1km', 'Euclid 2km', 'Manhattan 2km',
'KNN (K = 5)', 'KNN (K = 10)', 'KNN (K = 20)')
for (dist in c(500, 1000, 2000)) {
ND_Euclidresult = NDScanRadius(nodes, edges, dist, min=minPnts)
ND_Manhattanresult = NDScanManhattan(nodes, edges, dist, min=minPnts)
Edge_Euclidresult = edgeScanRadius(nodes, edges, dist, min=minPnts)
Edge_Manhattanresult = edgeScanManhattan(nodes, edges, dist, min=minPnts)
edgeScanMean = c(edgeScanMean, mean(Edge_Euclidresult$heat, na.rm=T), mean(Edge_Manhattanresult$heat, na.rm=T))
edgeScanVar = c(edgeScanVar, sd(Edge_Euclidresult$heat, na.rm=T), sd(Edge_Manhattanresult$heat, na.rm=T))
NDScanMean = c(NDScanMean, mean(ND_Euclidresult$heat, na.rm=T), mean(ND_Manhattanresult$heat, na.rm=T))
NDScanVar = c(NDScanVar, sd(ND_Euclidresult$heat, na.rm=T), sd(ND_Manhattanresult$heat, na.rm=T))
edgeScanNA = c(edgeScanNA, nrow(Edge_Euclidresult %>% drop_na(heat)), nrow(Edge_Manhattanresult %>% drop_na(heat)))
edgeScanPctNA = c(edgeScanPctNA, nrow(Edge_Euclidresult %>% drop_na(heat))/nrow(Edge_Euclidresult),
nrow(Edge_Manhattanresult %>% drop_na(heat))/nrow(Edge_Manhattanresult))
NDScanNA = c(NDScanNA, nrow(ND_Euclidresult %>% drop_na(heat)), nrow(ND_Euclidresult %>% drop_na(heat)))
NDScanPctNA = c(NDScanPctNA, nrow(ND_Euclidresult %>% drop_na(heat))/nrow(ND_Euclidresult),
nrow(ND_Manhattanresult %>% drop_na(heat))/nrow(ND_Manhattanresult))
}
for (k in c(5, 10, 20)) {
ND_KNNresult = NDScanKNearest(nodes, edges, k)
Edge_KNNresult = edgeScanKNearest(nodes, edges, k)
edgeScanMean = c(edgeScanMean, mean(Edge_KNNresult$heat, na.rm=T))
edgeScanVar = c(edgeScanVar, sd(Edge_KNNresult$heat, na.rm=T))
NDScanMean = c(NDScanMean, mean(ND_KNNresult$heat, na.rm=T))
NDScanVar = c(NDScanVar, sd(ND_KNNresult$heat, na.rm=T))
edgeScanNA = c(edgeScanNA, nrow(Edge_KNNresult %>% drop_na(heat)))
edgeScanPctNA = c(edgeScanPctNA, nrow(Edge_KNNresult %>% drop_na(heat))/nrow(Edge_KNNresult))
NDScanNA = c(NDScanNA, nrow(ND_KNNresult %>% drop_na(heat)))
NDScanPctNA = c(NDScanPctNA, nrow(ND_KNNresult %>% drop_na(heat))/nrow(ND_KNNresult))
}
kk = data.frame(neigh = neighborhood, EdgeScanMean = round(edgeScanMean, 2), EdgeScanVar = round(edgeScanVar, 2),
EdgeScanNA = edgeScanNA, EdgeScanPctNA = round(edgeScanPctNA, 2),
ND_ScanMean = round(NDScanMean, 2), ND_ScanVar = round(NDScanVar, 2),
ND_ScanNA = NDScanNA, ND_ScanPctNA = round(NDScanPctNA, 2))
library(SSNtools)
library(SSNtools)
DTMafiaNodes %>% nrow()
DTMafiaNodes = DTMafiaNodes
