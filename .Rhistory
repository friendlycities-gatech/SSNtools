insets_vp = viewport(0.21, 0.54, width = 0.3, height = aspect_ratio*0.5),
filename='/Users/xiaofanliang/Downloads/test.png', dpi=600)
tmap_save(g + box, insets_tm=InsetMap,
insets_vp = viewport(0.21, 0.54, width = 0.3, height = aspect_ratio*0.5),
filename='/Users/xiaofanliang/Dropbox (GaTech)/Spatial_Networks_R/SSN_tutorial/Figs/06-metrics-hotspot-inset.png', dpi=600)
tmap_save(g + box, insets_tm=InsetMap,
insets_vp = viewport(0.21, 0.54, width = 0.3, height = aspect_ratio*0.5),
filename='/Users/xiaofanliang/Dropbox (GaTech)/GT_Research/Spatial_Networks_R/SSN_tutorial/Figs/06-metrics-hotspot-inset.png', dpi=600)
#Plot Inset Map
Inset = st_bbox(data.frame(lon=c(-74.00434, -73.98125), lat=c(40.73080, 40.71109)) %>%
st_as_sf(coords=c('lon', 'lat'), crs=4326)) %>% st_transform(crs=32118) %>% st_as_sfc()
#Plot Inset Map
Inset = st_bbox(data.frame(lon=c(-74.00434, -73.98125), lat=c(40.73080, 40.71109)) %>%
st_as_sf(coords=c('lon', 'lat'), crs=4326) %>% st_transform(crs=32118)) %>% st_as_sfc()
Inset_bg = basemap_stars(Inset)
InsetMap = vis_inset(Inset_bg, 'Little Italy', breaks=breaks)
box = tm_shape(st_bbox(Inset) %>% st_as_sfc()) + tm_polygons(alpha=0, border.col='black', lwd=1)
aspect_ratio = unname((Inset$ymax - Inset$ymin)/(Inset$xmax - Inset$xmin))
library(grid)
tmap_save(g + box, insets_tm=InsetMap,
insets_vp = viewport(0.21, 0.54, width = 0.3, height = aspect_ratio*0.5),
filename='/Users/xiaofanliang/Dropbox (GaTech)/GT_Research/Spatial_Networks_R/SSN_tutorial/Figs/06-metrics-hotspot-inset.png', dpi=600)
#Plot Inset Map
Inset = st_bbox(data.frame(lon=c(-74.00434, -73.98125), lat=c(40.73080, 40.71109)) %>%
st_as_sf(coords=c('lon', 'lat'), crs=4326) %>% st_transform(crs=32118)) %>% st_as_sfc()
Inset_bg = basemap_stars(Inset)
InsetMap = vis_inset(Inset_bg, 'Little Italy', breaks=breaks)
box = tm_shape(st_bbox(Inset) %>% st_as_sfc()) + tm_polygons(alpha=0, border.col='black', lwd=1)
aspect_ratio = unname((Inset$ymax - Inset$ymin)/(Inset$xmax - Inset$xmin))
library(grid)
tmap_save(g + box, insets_tm=InsetMap,
insets_vp = viewport(0.21, 0.54, width = 0.3, height = aspect_ratio*0.5),
filename='/Users/xiaofanliang/Dropbox (GaTech)/GT_Research/Spatial_Networks_R/SSN_tutorial/Figs/06-metrics-hotspot-inset.png', dpi=600)
#Plot Inset Map
Inset = st_bbox(data.frame(lon=c(-74.00434, -73.98125), lat=c(40.73080, 40.71109)) %>%
st_as_sf(coords=c('lon', 'lat'), crs=4326)) %>% st_as_sfc()
Inset = st_bbox(st_transform(Inset, crs=32118))
Inset_bg = basemap_stars(Inset)
InsetMap = vis_inset(Inset_bg, 'Little Italy', breaks=breaks)
box = tm_shape(st_bbox(Inset) %>% st_as_sfc()) + tm_polygons(alpha=0, border.col='black', lwd=1)
aspect_ratio = unname((Inset$ymax - Inset$ymin)/(Inset$xmax - Inset$xmin))
library(grid)
tmap_save(g + box, insets_tm=InsetMap,
insets_vp = viewport(0.21, 0.54, width = 0.3, height = aspect_ratio*0.5),
filename='/Users/xiaofanliang/Dropbox (GaTech)/GT_Research/Spatial_Networks_R/SSN_tutorial/Figs/06-metrics-hotspot-inset.png', dpi=600)
#Plot Inset Map
Inset = st_bbox(data.frame(lon=c(-74.00434, -73.98125), lat=c(40.73080, 40.71109)) %>%
st_as_sf(coords=c('lon', 'lat'), crs=4326) %>% st_transform(crs=32118)) %>% st_as_sfc()
Inset_bg = basemap_stars(Inset)
Inset_bg
InsetMap = vis_inset(Inset_bg, 'Little Italy', breaks=breaks)
InsetMap
InsetMap = vis_inset(Inset_bg, 'Little Italy', breaks=c(0, 0.00001, 0.10, 0.25, 0.667))
box = tm_shape(st_bbox(Inset) %>% st_as_sfc()) + tm_polygons(alpha=0, border.col='black', lwd=1)
box
aspect_ratio = unname((Inset$ymax - Inset$ymin)/(Inset$xmax - Inset$xmin))
library(grid)
tmap_save(g + box, insets_tm=InsetMap,
insets_vp = viewport(0.21, 0.54, width = 0.3, height = aspect_ratio*0.5),
filename='/Users/xiaofanliang/Dropbox (GaTech)/GT_Research/Spatial_Networks_R/SSN_tutorial/Figs/06-metrics-hotspot-inset.png', dpi=600)
g+box
InsetMap
#Plot Inset Map
Inset = st_bbox(data.frame(lon=c(-74.00434, -73.98125), lat=c(40.73080, 40.71109)) %>%
st_as_sf(coords=c('lon', 'lat'), crs=4326) %>% st_transform(crs=32118)) %>% st_as_sfc()
Inset_bg = basemap_stars(Inset)
InsetMap = vis_inset(Inset_bg, 'Little Italy', breaks=c(0, 0.00001, 0.10, 0.25, 0.667))
box = tm_shape(st_bbox(Inset) %>% st_as_sfc()) + tm_polygons(alpha=0, border.col='black', lwd=1)
aspect_ratio = unname((Inset$ymax - Inset$ymin)/(Inset$xmax - Inset$xmin))
InsetMap
library(grid)
tmap_save(g + box, insets_tm=InsetMap,
insets_vp = viewport(0.21, 0.54, width = 0.3, height = aspect_ratio*0.5),
filename='/Users/xiaofanliang/Dropbox (GaTech)/GT_Research/Spatial_Networks_R/SSN_tutorial/Figs/06-metrics-hotspot-inset.png', dpi=600)
#Plot Inset Map
Inset = st_bbox(data.frame(lon=c(-74.00434, -73.98125), lat=c(40.73080, 40.71109)) %>%
st_as_sf(coords=c('lon', 'lat'), crs=4326) %>% st_transform(crs=32118)) #%>% st_as_sfc()
Inset_bg = basemap_stars(Inset)
InsetMap = vis_inset(Inset_bg, 'Little Italy', breaks=c(0, 0.00001, 0.10, 0.25, 0.667))
box = tm_shape(st_bbox(Inset) %>% st_as_sfc()) + tm_polygons(alpha=0, border.col='black', lwd=1)
aspect_ratio = unname((Inset$ymax - Inset$ymin)/(Inset$xmax - Inset$xmin))
InsetMap
library(grid)
tmap_save(g + box, insets_tm=InsetMap,
insets_vp = viewport(0.21, 0.54, width = 0.3, height = aspect_ratio*0.5),
filename='/Users/xiaofanliang/Dropbox (GaTech)/GT_Research/Spatial_Networks_R/SSN_tutorial/Figs/06-metrics-hotspot-inset.png', dpi=600)
View(NYCMafiaEdges)
library(igraph)
library(SSNtools)
#MafiaNodes and MafiaEdges are built-in datasets in SSNtools package
g <- graph_from_data_frame(MafiaEdges, directed = FALSE, vertices=MafiaNodes)
#set the node size to base on clustering coefficients
V(g)$size <- transitivity(g, type='local')
#Set the node color to vary by mafia family group.
# ---- get all color from a color device
color = grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)]
# ---- sample n color, in which n = family groups
colrs <- sample(color, length(unique(V(g)$Family)))
# ---- #assign color to correpsonding mafia family member
V(g)$color <- colrs[as.numeric(factor(V(g)$Family))]
#Plot igraph network
plot(g,
vertex.label = NA,
vertex.color = V(g)$color,
vertex.size = 50*V(g)$size, #Scaled node size
edge.width=0.5,
layout=layout_with_fr(g)
)
g
V(g)$size
#Plot igraph network
plot(g,
vertex.label = NA,
vertex.color = V(g)$color,
vertex.size = 50*V(g)$size, #Scaled node size
edge.width=0.5,
layout=layout_with_fr(g)
)
g
plot(g)
g
#Plot igraph network
plot.igraph(g,
vertex.label = NA,
vertex.color = V(g)$color,
vertex.size = 50*V(g)$size, #Scaled node size
edge.width=0.5,
layout=layout_with_fr(g)
)
g <- make_ring(10)
plot(g)
data(MafiaEdges)
data("MafiaNodes")
force(MafiaNodes)
#MafiaNodes and MafiaEdges are built-in datasets in SSNtools package
g <- graph_from_data_frame(MafiaEdges, directed = FALSE, vertices=MafiaNodes)
#set the node size to base on clustering coefficients
V(g)$size <- transitivity(g, type='local')
#Set the node color to vary by mafia family group.
# ---- get all color from a color device
color = grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)]
# ---- sample n color, in which n = family groups
colrs <- sample(color, length(unique(V(g)$Family)))
# ---- #assign color to correpsonding mafia family member
V(g)$color <- colrs[as.numeric(factor(V(g)$Family))]
#Plot igraph network
plot(g,
vertex.label = NA,
vertex.color = V(g)$color,
vertex.size = 50*V(g)$size, #Scaled node size
edge.width=0.5,
layout=layout_with_fr(g)
)
View(NYCMafiaEdges)
#MafiaNodes and MafiaEdges are built-in datasets in SSNtools package
g <- graph_from_data_frame(NYCMafiaEdges, directed = FALSE, vertices=NYCMafiaNodes)
#set the node size to base on clustering coefficients
V(g)$size <- transitivity(g, type='local')
#Set the node color to vary by mafia family group.
# ---- get all color from a color device
color = grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)]
# ---- sample n color, in which n = family groups
colrs <- sample(color, length(unique(V(g)$Family)))
# ---- #assign color to correpsonding mafia family member
V(g)$color <- colrs[as.numeric(factor(V(g)$Family))]
#Plot igraph network
plot(g,
vertex.label = NA,
vertex.color = V(g)$color,
vertex.size = 50*V(g)$size, #Scaled node size
edge.width=0.5,
layout=layout_with_fr(g)
)
#MafiaNodes and MafiaEdges are built-in datasets in SSNtools package
g <- graph_from_data_frame(MafiaEdges, directed = FALSE, vertices=MafiaNodes)
g
#Set the node color to vary by mafia family group.
# ---- get all color from a color device
color = grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)]
# ---- sample n color, in which n = family groups
colrs <- sample(color, length(unique(V(g)$Family)))
# ---- #assign color to correpsonding mafia family member
V(g)$color <- colrs[as.numeric(factor(V(g)$Family))]
#Plot igraph network
igraph.plot(g,
vertex.label = NA,
vertex.color = V(g)$color,
vertex.size = 50*V(g)$size, #Scaled node size
edge.width=0.5,
layout=layout_with_fr(g)
)
library(igraph)
library(SSNtools)
#Plot igraph network
plot(g,
vertex.label = NA,
vertex.color = V(g)$color,
vertex.size = 50*V(g)$size, #Scaled node size
edge.width=0.5,
layout=layout_with_fr(g)
)
#MafiaNodes and MafiaEdges are built-in datasets in SSNtools package
g <- graph_from_data_frame(MafiaEdges, directed = FALSE, vertices=MafiaNodes)
#set the node size to base on clustering coefficients
V(g)$size <- transitivity(g, type='local')
#Set the node color to vary by mafia family group.
# ---- get all color from a color device
color = grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)]
# ---- sample n color, in which n = family groups
colrs <- sample(color, length(unique(V(g)$Family)))
# ---- #assign color to correpsonding mafia family member
V(g)$color <- colrs[as.numeric(factor(V(g)$Family))]
#Plot igraph network
plot(g,
vertex.label = NA,
vertex.color = V(g)$color,
vertex.size = 50*V(g)$size, #Scaled node size
edge.width=0.5,
layout=layout_with_fr(g)
)
plot(g)
V(g)$size
V(g)$color
#Plot igraph network
plot(g,
vertex.label = NA,
vertex.color = V(g)$color,
#vertex.size = 50*V(g)$size, #Scaled node size
edge.width=0.5,
layout=layout_with_fr(g)
)
V(g)$size
delete_vertices(g, is.na(V(g)$size))
#Set the node color to vary by mafia family group.
# ---- get all color from a color device
color = grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)]
# ---- sample n color, in which n = family groups
colrs <- sample(color, length(unique(V(g)$Family)))
# ---- #assign color to correpsonding mafia family member
V(g)$color <- colrs[as.numeric(factor(V(g)$Family))]
#Plot igraph network
plot(g,
vertex.label = NA,
vertex.color = V(g)$color,
vertex.size = 50*V(g)$size, #Scaled node size
edge.width=0.5,
layout=layout_with_fr(g)
)
V(g)$size
#delete???
g = delete_vertices(g, is.na(V(g)$size))
#MafiaNodes and MafiaEdges are built-in datasets in SSNtools package
g <- graph_from_data_frame(MafiaEdges, directed = FALSE, vertices=MafiaNodes)
#set the node size to base on clustering coefficients
V(g)$size <- transitivity(g, type='local')
#delete???
g = delete_vertices(g, is.na(V(g)$size))
V(g)$size
#Set the node color to vary by mafia family group.
# ---- get all color from a color device
color = grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)]
# ---- sample n color, in which n = family groups
colrs <- sample(color, length(unique(V(g)$Family)))
# ---- #assign color to correpsonding mafia family member
V(g)$color <- colrs[as.numeric(factor(V(g)$Family))]
#Plot igraph network
plot(g,
vertex.label = NA,
vertex.color = V(g)$color,
vertex.size = 50*V(g)$size, #Scaled node size
edge.width=0.5,
layout=layout_with_fr(g)
)
library(sf)
library(tidyverse)
library(tmap)
library(igraph)
library(RColorBrewer)
library(tigris)
#install.packages("devtools") #to download R package on GitHub
#devtools::install_github("friendlycities-gatech/SSNtools")
library(SSNtools)
#MafiaNodes is a built-in dataset in SSNtools R package
MafiaSpatial = MafiaNodes %>%
st_as_sf(coords=c("LonX", "LatY"), crs = 4326)
head(MafiaSpatial, 3)
#Convert coordinate system
MafiaSpatial = MafiaSpatial %>%
st_transform(MafiaSpatioal, crs=102010)
#states is a function in tigris to download U.S. state boundary shapefile
us_states = states(cb=TRUE, progress_bar = FALSE) %>%
filter(!STUSPS %in% c('PR','AS', 'AK', 'GU','MP','VI', 'HI')) %>%
st_transform(crs=102010)
#Convert coordinate system
MafiaSpatial = MafiaSpatial %>%
st_transform(MafiaSpatioal, crs=102010)
#Convert coordinate system
MafiaSpatial = MafiaSpatial %>%
st_transform(MafiaSpatioal, crs="ESRI:102010")
nodes = processNode(nodes=NYCMafiaNodes, 'label', 'LonX', 'LatY')
library(tmap)
library(basemaps)
library(sf)
library(tidyverse)
library(stplanr)
# we will use NDScanRadius as an example
result = NDScanRadius(nodes, edges, 500, min=3)
heat = result[[1]]
edgeWithin = result[[2]]
# convert heat dataframe to a spatial sf object
MafiaSpatial = heat %>%
left_join(NYCMafiaNodes, by=c('label'), copy=FALSE) %>% st_as_sf(coords=c('LonX', 'LatY'), crs=32118)
# convert edgeWithin dataframe to line geometry and filter those that are within the window radius.
NYCMafiaEdges_shp = od2line(edgeWithin, MafiaSpatial) %>%
filter(WithinWindow == 1)
# create basemap with functions from basemaps library
bgbox = st_bbox(MafiaSpatial) %>% st_as_sfc()
bg = basemap_stars(bgbox, map_service = 'carto')
# create hotspot map with functions from tmap library
tmap_mode('plot')
g = tm_shape(bg) +
tm_rgb(alpha=0.8) +
#map edges within searching window
tm_shape(NYCMafiaEdges_shp) +
tm_lines(col='black', lwd=1) +
#map nodes with NA values
tm_shape(MafiaSpatial %>% filter(is.na(heat))) +
tm_symbols(col='white', size=0.05) +
#map nodes with heat values, allowing nodes with higher heat values to be mapped on top
tm_shape(MafiaSpatial %>% drop_na(heat) %>% arrange(heat)) +
tm_symbols(col='heat', size=0.1, style='fixed', legend.col.show = FALSE, palette = c('#FBD977', '#F78D3D', '#E3211B', '#800F26'), breaks=c(0, 0.00001, 0.10, 0.25, 0.667)) +
#customize legend and layout
tm_add_legend(type='symbol', labels=c('0', '(0, 0.10]', '(0.10, 0.25]', '(0.25, 0.667]', 'NA (Less than MinPts)'), col=c('#FBD977', '#F78D3D', '#E3211B', '#800F26', 'white'), is.portrait = T, title=c('Network Density'), size=0.5) +
tm_add_legend(type='line', labels=c(paste0('Edges within window size')), col='black', lwd=1) +
tm_scale_bar(breaks=c(0, 5, 10), text.size = 1) +
tm_layout(legend.title.size = 1.3, legend.text.size = 1, legend.width = 1) +
tm_layout(main.title = 'NYC 1960s Mafia SSN Hotspots',
main.title.position = c('center'))
g
library(SSNtools)
library(tidyverse)
library(igraph)
library(tmap)
library(sf)
library(stplanr)
data(NYCMafiaNodes)
data(NYCMafiaEdges)
nodes = processNode(NYCMafiaNodes, 'label', 'LonX', 'LatY')
edges = processEdge(NYCMafiaEdges, 'Source', 'Target')
library(tmap)
library(basemaps)
library(sf)
library(tidyverse)
library(stplanr)
# we will use NDScanRadius as an example
result = NDScanRadius(nodes, edges, 500, min=3)
heat = result[[1]]
edgeWithin = result[[2]]
# convert heat dataframe to a spatial sf object
MafiaSpatial = heat %>%
left_join(NYCMafiaNodes, by=c('label'), copy=FALSE) %>% st_as_sf(coords=c('LonX', 'LatY'), crs=32118)
# convert edgeWithin dataframe to line geometry and filter those that are within the window radius.
NYCMafiaEdges_shp = od2line(edgeWithin, MafiaSpatial) %>%
filter(WithinWindow == 1)
# create basemap with functions from basemaps library
bgbox = st_bbox(MafiaSpatial) %>% st_as_sfc()
bg = basemap_stars(bgbox, map_service = 'carto')
# create hotspot map with functions from tmap library
tmap_mode('plot')
g = tm_shape(bg) +
tm_rgb(alpha=0.8) +
#map edges within searching window
tm_shape(NYCMafiaEdges_shp) +
tm_lines(col='black', lwd=1) +
#map nodes with NA values
tm_shape(MafiaSpatial %>% filter(is.na(heat))) +
tm_symbols(col='white', size=0.05) +
#map nodes with heat values, allowing nodes with higher heat values to be mapped on top
tm_shape(MafiaSpatial %>% drop_na(heat) %>% arrange(heat)) +
tm_symbols(col='heat', size=0.1, style='fixed', legend.col.show = FALSE, palette = c('#FBD977', '#F78D3D', '#E3211B', '#800F26'), breaks=c(0, 0.00001, 0.10, 0.25, 0.667)) +
#customize legend and layout
tm_add_legend(type='symbol', labels=c('0', '(0, 0.10]', '(0.10, 0.25]', '(0.25, 0.667]', 'NA (Less than MinPts)'), col=c('#FBD977', '#F78D3D', '#E3211B', '#800F26', 'white'), is.portrait = T, title=c('Network Density'), size=0.5) +
tm_add_legend(type='line', labels=c(paste0('Edges within window size')), col='black', lwd=1) +
tm_scale_bar(breaks=c(0, 5, 10), text.size = 1) +
tm_layout(legend.title.size = 1.3, legend.text.size = 1, legend.width = 1) +
tm_layout(main.title = 'NYC 1960s Mafia SSN Hotspots',
main.title.position = c('center'))
g
data(NYCMafiaNodes)
data(NYCMafiaEdges)
nodes = processNode(NYCMafiaNodes, 'label', 'LonX', 'LatY')
edges = processEdge(NYCMafiaEdges, 'Source', 'Target')
library(tmap)
library(basemaps)
library(sf)
library(tidyverse)
library(stplanr)
# we will use NDScanRadius as an example
result = NDScanRadius(nodes, edges, 500, min=3)
heat = result[[1]]
edgeWithin = result[[2]]
# convert heat dataframe to a spatial sf object
MafiaSpatial = heat %>%
left_join(NYCMafiaNodes, by=c('label'), copy=FALSE) %>% st_as_sf(coords=c('LonX', 'LatY'), crs=32118)
# convert edgeWithin dataframe to line geometry and filter those that are within the window radius.
NYCMafiaEdges_shp = od2line(edgeWithin, MafiaSpatial) %>%
filter(WithinWindow == 1)
# create basemap with functions from basemaps library
bgbox = st_bbox(MafiaSpatial) %>% st_as_sfc()
# create hotspot map with functions from tmap library
tmap_mode('plot')
g =
# tm_shape(bg) +
# tm_rgb(alpha=0.8) +
#map edges within searching window
tm_shape(NYCMafiaEdges_shp) +
tm_lines(col='black', lwd=1) +
#map nodes with NA values
tm_shape(MafiaSpatial %>% filter(is.na(heat))) +
tm_symbols(col='white', size=0.05) +
#map nodes with heat values, allowing nodes with higher heat values to be mapped on top
tm_shape(MafiaSpatial %>% drop_na(heat) %>% arrange(heat)) +
tm_symbols(col='heat', size=0.1, style='fixed', legend.col.show = FALSE, palette = c('#FBD977', '#F78D3D', '#E3211B', '#800F26'), breaks=c(0, 0.00001, 0.10, 0.25, 0.667)) +
#customize legend and layout
tm_add_legend(type='symbol', labels=c('0', '(0, 0.10]', '(0.10, 0.25]', '(0.25, 0.667]', 'NA (Less than MinPts)'), col=c('#FBD977', '#F78D3D', '#E3211B', '#800F26', 'white'), is.portrait = T, title=c('Network Density'), size=0.5) +
tm_add_legend(type='line', labels=c(paste0('Edges within window size')), col='black', lwd=1) +
tm_scale_bar(breaks=c(0, 5, 10), text.size = 1) +
tm_layout(legend.title.size = 1.3, legend.text.size = 1, legend.width = 1) +
tm_layout(main.title = 'NYC 1960s Mafia SSN Hotspots',
main.title.position = c('center'))
g
g =
# tm_shape(bg) +
# tm_rgb(alpha=0.8) +
#map edges within searching window
tm_shape(NYCMafiaEdges_shp) +
tm_lines(col='black', lwd=1) +
#map nodes with NA values
tm_shape(MafiaSpatial %>% filter(is.na(heat))) +
tm_symbols(col='white', size=0.05) +
#map nodes with heat values, allowing nodes with higher heat values to be mapped on top
tm_shape(MafiaSpatial %>% drop_na(heat) %>% arrange(heat)) +
tm_symbols(col='heat', size=0.1, style='fixed', legend.col.show = FALSE, palette = c('#FBD977', '#F78D3D', '#E3211B', '#800F26'), breaks=c(0, 0.00001, 0.10, 0.25, 0.667)) +
#customize legend and layout
tm_add_legend(type='symbol', labels=c('0', '(0, 0.10]', '(0.10, 0.25]', '(0.25, 0.667]', 'NA (Less than MinPts)'), col=c('#FBD977', '#F78D3D', '#E3211B', '#800F26', 'white'), is.portrait = T, title=c('Network Density'), size=0.5) +
tm_add_legend(type='line', labels=c(paste0('Edges within window size')), col='black', lwd=1) +
tm_scale_bar(breaks=c(0, 5, 10), text.size = 1) +
tm_layout(legend.title.size = 1.3, legend.text.size = 1, legend.width = 1) +
tm_layout(main.title = 'NYC 1960s Mafia SSN Hotspots',
main.title.position = c('center'))
g
bg = basemap_stars(bgbox, map_service = 'carto')
# create hotspot map with functions from tmap library
tmap_mode('plot')
g =
tm_shape(bg) +
tm_rgb(alpha=0.8) +
#map edges within searching window
tm_shape(NYCMafiaEdges_shp) +
tm_lines(col='black', lwd=1) +
#map nodes with NA values
tm_shape(MafiaSpatial %>% filter(is.na(heat))) +
tm_symbols(col='white', size=0.05) +
#map nodes with heat values, allowing nodes with higher heat values to be mapped on top
tm_shape(MafiaSpatial %>% drop_na(heat) %>% arrange(heat)) +
tm_symbols(col='heat', size=0.1, style='fixed', legend.col.show = FALSE, palette = c('#FBD977', '#F78D3D', '#E3211B', '#800F26'), breaks=c(0, 0.00001, 0.10, 0.25, 0.667)) +
#customize legend and layout
tm_add_legend(type='symbol', labels=c('0', '(0, 0.10]', '(0.10, 0.25]', '(0.25, 0.667]', 'NA (Less than MinPts)'), col=c('#FBD977', '#F78D3D', '#E3211B', '#800F26', 'white'), is.portrait = T, title=c('Network Density'), size=0.5) +
tm_add_legend(type='line', labels=c(paste0('Edges within window size')), col='black', lwd=1) +
tm_scale_bar(breaks=c(0, 5, 10), text.size = 1) +
tm_layout(legend.title.size = 1.3, legend.text.size = 1, legend.width = 1) +
tm_layout(main.title = 'NYC 1960s Mafia SSN Hotspots',
main.title.position = c('center'))
g
bg = basemap_stars(bgbox, map_service = 'carto')
# create hotspot map with functions from tmap library
tmap_mode('plot')
g =
tm_shape(bg) +
tm_rgb(alpha=0.8) +
#map edges within searching window
tm_shape(NYCMafiaEdges_shp) +
tm_lines(col='black', lwd=1) +
#map nodes with NA values
tm_shape(MafiaSpatial %>% filter(is.na(heat))) +
tm_symbols(col='white', size=0.05) +
#map nodes with heat values, allowing nodes with higher heat values to be mapped on top
tm_shape(MafiaSpatial %>% drop_na(heat) %>% arrange(heat)) +
tm_symbols(col='heat', size=0.1, style='fixed', legend.col.show = FALSE, palette = c('#FBD977', '#F78D3D', '#E3211B', '#800F26'), breaks=c(0, 0.00001, 0.10, 0.25, 0.667)) +
#customize legend and layout
tm_add_legend(type='symbol', labels=c('0', '(0, 0.10]', '(0.10, 0.25]', '(0.25, 0.667]', 'NA (Less than MinPts)'), col=c('#FBD977', '#F78D3D', '#E3211B', '#800F26', 'white'), is.portrait = T, title=c('Network Density'), size=0.5) +
tm_add_legend(type='line', labels=c(paste0('Edges within window size')), col='black', lwd=1) +
tm_scale_bar(breaks=c(0, 5, 10), text.size = 1) +
tm_layout(legend.title.size = 1.3, legend.text.size = 1, legend.width = 1) +
tm_layout(main.title = 'NYC 1960s Mafia SSN Hotspots',
main.title.position = c('center'))
g
bg = basemap_stars(bgbox, map_service = 'carto')
library(basemaps)
library(tidyverse)
bg = basemap_stars(st_bbox(data.frame(lon=c(-74.00434, -73.98125), lat=c(40.73080, 40.71109)) %>% st_as_sf(coords=c('lon', 'lat'), crs=4326) %>% st_as_sfc()))
library(basemaps)
library(tidyverse)
bg = basemap_stars(st_bbox(data.frame(lon=c(-74.00434, -73.98125), lat=c(40.73080, 40.71109)) %>% st_as_sf(coords=c('lon', 'lat'), crs=32118) %>% st_as_sfc()))
library(basemaps)
library(tidyverse)
bg = basemap_stars(st_bbox(data.frame(lon=c(-74.00434, -73.98125), lat=c(40.73080, 40.71109)) %>% st_as_sf(coords=c('lon', 'lat'), crs=32118) %>% st_as_sfc()),
map_service = 'carto')
library(basemaps)
library(tidyverse)
bg = basemap_stars(st_bbox(data.frame(lon=c(-74.00434, -73.98125), lat=c(40.73080, 40.71109)) %>% st_as_sf(coords=c('lon', 'lat'), crs=32118) %>% st_as_sfc()),
map_service = 'carto')
