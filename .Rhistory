tm_layout(legend.title.size = 1.5, legend.text.size = 1.2, legend.width = 1) +
tm_layout(legend.bg.color = 'white', legend.bg.alpha = 0.7,
main.title = Gioutput,
main.title.position = c('center'))
tmap_save(g, filename=paste0('Figs/NewYork/0330/', output, Gioutput, '.png'), unit='in', dpi=600)
# Create a regular grid of 100
pixelsize = 1000
heat = heat %>% left_join(NYCMafiaNodes, copu=FALSE) %>% st_as_sf(coords=c('LonX', 'LatY'), crs=32118)
box = round(extent(heat) / pixelsize) * pixelsize
template = raster(box, crs = 32118,
nrows = (box@ymax - box@ymin) / pixelsize,
ncols = (box@xmax - box@xmin) / pixelsize)
heat$PRESENT = 1
getisraster = rasterize(heat, template, field = 'PRESENT', fun = sum)
getisgrid = rasterToPolygons(getisraster)
tmap_mode('view')
tm_shape(heat) +
tm_symbols(size=0.01) +
tm_shape(getisgrid %>% st_as_sf()) +
tm_polygons(alpha=0)
# Create the list of neighbors
neighbors = poly2nb(getisgrid)
weighted_neighbors = nb2listw(neighbors, zero.policy=T)
# Perform the local G analysis (Getis-Ord GI*)
getisgrid$HOTSPOT = as.vector(localG(getisgrid$layer, weighted_neighbors))
getisgrid = getisgrid %>% st_as_sf()
# tm_shape(st_read('Data/bg_atl_socio.shp') %>% filter(GEOID %in% unique(POINodes$label))) +
#   tm_polygons(alpha=0, border.col = 'black', border.alpha=0.1) +
tmap_mode('plot')
bgbox = st_bbox(data.frame(lon=c(-74.10039, -73.78967+0.2), lat=c(40.57224 + 0.01, 40.9638)) %>%
st_as_sf(coords=c('lon', 'lat'), crs=4326)) %>% st_as_sfc()
bgbox = st_bbox(st_transform(bgbox, crs=32118))
bgbox = st_bbox(heat)
bg = basemap_stars(bgbox, map_service = 'carto')
g=tm_shape(bg) +
tm_rgb(alpha=0.8) +
tm_shape(cbgshp %>% st_union(by_feature = FALSE)) +
tm_polygons(alpha=0, border.col = 'black', border.alpha = 0.2, lwd=2) +
tm_shape(getisgrid %>% filter(HOTSPOT <= 1.65 | is.na(HOTSPOT))) +
tm_polygons(alpha=0, border.col='grey') +
tm_shape(getisgrid %>% filter(HOTSPOT > 1.65)) +
tm_polygons(alpha=0, border.col='darkred', lwd=3) +
# tm_shape(edgeWithin %>% filter(WithinWindow == 1)) +
# tm_lines(alpha=0.5) +
tm_shape(heat %>% filter(heat <= breaks[[3]] | is.na(heat))) +
tm_symbols(size=0.1, col='grey') +
tm_shape(heat %>% filter(heat > breaks[[3]])) +
tm_symbols(col='heat', size=0.22, style='fixed', legend.col.show = FALSE, palette = c('#FBD977', '#F78D3D', '#E3211B', '#800F26'), breaks=breaks) +
# tm_symbols(size=0.2, col='heat', style='fixed', breaks=c(0, 0.25, 0.5, 0.75, 1),
#            palette=c('#FFEDA0', '#FEB24B', '#E3211C', '#800F26')) +
tm_add_legend(type='symbol', labels=c(paste0('NA or <', breaks[[3]]), labels[c(3,4)]), col=c('grey', '#E3211B', '#800F26'),
title=paste0(legend_name, ' (Euclid = ', dist, 'm)'), size=0.5) +
tm_add_legend("fill", labels=c('Insignificant', '90% Confidence Hot Spot'), alpha=0, border.col = c('grey', 'darkred'), border.lwd = c(1,3), title='Getis-Ord Gi* Hot Spot') +
#tm_add_legend("fill", labels=c('500m * 500m grid'), alpha=0, border.col='grey') +
tm_scale_bar(breaks=c(0, 1, 2, 4), text.size = 1) +
tm_layout(legend.title.size = 1.5, legend.text.size = 1.2, legend.width = 1) +
tm_layout(legend.bg.color = 'white', legend.bg.alpha = 0.7,
main.title = Gioutput,
main.title.position = c('center'))
g=tm_shape(bg) +
tm_rgb(alpha=0.8) +
tm_shape(cbgshp %>% st_union(by_feature = FALSE)) +
tm_polygons(alpha=0, border.col = 'black', border.alpha = 0.2, lwd=2) +
tm_shape(getisgrid %>% filter(HOTSPOT <= 1.65 | is.na(HOTSPOT))) +
tm_polygons(alpha=0, border.col='grey') +
tm_shape(getisgrid %>% filter(HOTSPOT > 1.65)) +
tm_polygons(alpha=0, border.col='darkred', lwd=3) +
# tm_shape(edgeWithin %>% filter(WithinWindow == 1)) +
# tm_lines(alpha=0.5) +
tm_shape(heat %>% filter(heat <= breaks[[3]] | is.na(heat))) +
tm_symbols(size=0.1, col='grey') +
tm_shape(heat %>% filter(heat > breaks[[3]])) +
tm_symbols(col='heat', size=0.22, style='fixed', legend.col.show = FALSE, palette = c('#FBD977', '#F78D3D', '#E3211B', '#800F26'), breaks=breaks) +
# tm_symbols(size=0.2, col='heat', style='fixed', breaks=c(0, 0.25, 0.5, 0.75, 1),
#            palette=c('#FFEDA0', '#FEB24B', '#E3211C', '#800F26')) +
tm_add_legend(type='symbol', labels=c(paste0('NA or <', breaks[[3]]), labels[c(3,4)]), col=c('grey', '#E3211B', '#800F26'),
title=paste0(legend_name, ' (D = ', dist, 'm)'), size=0.5) +
tm_add_legend("fill", labels=c('Insignificant', '90% Confidence Hot Spot'), alpha=0, border.col = c('grey', 'darkred'), border.lwd = c(1,3), title='Getis-Ord Gi* Hot Spot') +
#tm_add_legend("fill", labels=c('500m * 500m grid'), alpha=0, border.col='grey') +
tm_scale_bar(breaks=c(0, 1, 2, 4), text.size = 1) +
tm_layout(legend.title.size = 1.5, legend.text.size = 1.2, legend.width = 1) +
tm_layout(legend.bg.color = 'white', legend.bg.alpha = 0.7,
main.title = Gioutput,
main.title.position = c('center'))
tmap_save(g, filename=paste0('Figs/NewYork/0330/', output, Gioutput, '.png'), unit='in', dpi=600)
legend_name = 'Num of Edges'
output = 'EdgeScan'
breaks = c(0, 0.00001, 2, 5, 24)
labels = c('0', '(0, 2]', '(2, 5]', '(5, 24]')
temp = edgeScanRadius(nodes, edges, dist, min=minPnts)
heat1 = temp[[1]]
edgeWithin1 = temp[[2]]
Gioutput = c('NYC Mafia Network EdgeScan vs. Getis-Ord*')
heat = heat1
edgeWithin = edgeWithin1
# Create a regular grid of 100
pixelsize = 1000
heat = heat %>% left_join(NYCMafiaNodes, copu=FALSE) %>% st_as_sf(coords=c('LonX', 'LatY'), crs=32118)
box = round(extent(heat) / pixelsize) * pixelsize
template = raster(box, crs = 32118,
nrows = (box@ymax - box@ymin) / pixelsize,
ncols = (box@xmax - box@xmin) / pixelsize)
heat$PRESENT = 1
getisraster = rasterize(heat, template, field = 'PRESENT', fun = sum)
getisgrid = rasterToPolygons(getisraster)
tmap_mode('view')
tm_shape(heat) +
tm_symbols(size=0.01) +
tm_shape(getisgrid %>% st_as_sf()) +
tm_polygons(alpha=0)
# Create the list of neighbors
neighbors = poly2nb(getisgrid)
weighted_neighbors = nb2listw(neighbors, zero.policy=T)
# Perform the local G analysis (Getis-Ord GI*)
getisgrid$HOTSPOT = as.vector(localG(getisgrid$layer, weighted_neighbors))
getisgrid = getisgrid %>% st_as_sf()
# tm_shape(st_read('Data/bg_atl_socio.shp') %>% filter(GEOID %in% unique(POINodes$label))) +
#   tm_polygons(alpha=0, border.col = 'black', border.alpha=0.1) +
tmap_mode('plot')
bgbox = st_bbox(data.frame(lon=c(-74.10039, -73.78967+0.2), lat=c(40.57224 + 0.01, 40.9638)) %>%
st_as_sf(coords=c('lon', 'lat'), crs=4326)) %>% st_as_sfc()
bgbox = st_bbox(st_transform(bgbox, crs=32118))
bgbox = st_bbox(heat)
bg = basemap_stars(bgbox, map_service = 'carto')
g=tm_shape(bg) +
tm_rgb(alpha=0.8) +
tm_shape(cbgshp %>% st_union(by_feature = FALSE)) +
tm_polygons(alpha=0, border.col = 'black', border.alpha = 0.2, lwd=2) +
tm_shape(getisgrid %>% filter(HOTSPOT <= 1.65 | is.na(HOTSPOT))) +
tm_polygons(alpha=0, border.col='grey') +
tm_shape(getisgrid %>% filter(HOTSPOT > 1.65)) +
tm_polygons(alpha=0, border.col='darkred', lwd=3) +
# tm_shape(edgeWithin %>% filter(WithinWindow == 1)) +
# tm_lines(alpha=0.5) +
tm_shape(heat %>% filter(heat <= breaks[[3]] | is.na(heat))) +
tm_symbols(size=0.1, col='grey') +
tm_shape(heat %>% filter(heat > breaks[[3]])) +
tm_symbols(col='heat', size=0.22, style='fixed', legend.col.show = FALSE, palette = c('#FBD977', '#F78D3D', '#E3211B', '#800F26'), breaks=breaks) +
# tm_symbols(size=0.2, col='heat', style='fixed', breaks=c(0, 0.25, 0.5, 0.75, 1),
#            palette=c('#FFEDA0', '#FEB24B', '#E3211C', '#800F26')) +
tm_add_legend(type='symbol', labels=c(paste0('NA or <', breaks[[3]]), labels[c(3,4)]), col=c('grey', '#E3211B', '#800F26'),
title=paste0(legend_name, ' (D = ', dist, 'm)'), size=0.5) +
tm_add_legend("fill", labels=c('Insignificant', '90% Confidence Hot Spot'), alpha=0, border.col = c('grey', 'darkred'), border.lwd = c(1,3), title='Getis-Ord Gi* Hot Spot') +
#tm_add_legend("fill", labels=c('500m * 500m grid'), alpha=0, border.col='grey') +
tm_scale_bar(breaks=c(0, 1, 2, 4), text.size = 1) +
tm_layout(legend.title.size = 1.5, legend.text.size = 1.2, legend.width = 1) +
tm_layout(legend.bg.color = 'white', legend.bg.alpha = 0.7,
main.title = Gioutput,
main.title.position = c('center'))
tmap_save(g, filename=paste0('Figs/NewYork/0330/', output, Gioutput, '.png'), unit='in', dpi=600)
tmap_save(g, filename=paste0('Figs/NewYork/0330/', output, Gioutput, '.png'), unit='in', dpi=600)
#NDScan
legend_name = 'Network Density'
output = 'NDScan'
breaks=c(0, 0.00001, 0.10, 0.25, 0.667)
labels = c('0', '(0, 0.10]', '(0.10, 0.25]', '(0.25, 0.667]')
temp = NDScanRadius(nodes, edges, dist, min=minPnts)
heat2 = temp[[1]]
edgeWithin2 = temp[[2]]
Gioutput = c('NYC Mafia Network NDScan vs. Getis-Ord*')
heat = heat2
edgeWithin = edgeWithin2
# Create a regular grid of 100
pixelsize = 1000
heat = heat %>% left_join(NYCMafiaNodes, copu=FALSE) %>% st_as_sf(coords=c('LonX', 'LatY'), crs=32118)
box = round(extent(heat) / pixelsize) * pixelsize
template = raster(box, crs = 32118,
nrows = (box@ymax - box@ymin) / pixelsize,
ncols = (box@xmax - box@xmin) / pixelsize)
heat$PRESENT = 1
getisraster = rasterize(heat, template, field = 'PRESENT', fun = sum)
getisgrid = rasterToPolygons(getisraster)
tmap_mode('view')
tm_shape(heat) +
tm_symbols(size=0.01) +
tm_shape(getisgrid %>% st_as_sf()) +
tm_polygons(alpha=0)
# Create the list of neighbors
neighbors = poly2nb(getisgrid)
weighted_neighbors = nb2listw(neighbors, zero.policy=T)
# Perform the local G analysis (Getis-Ord GI*)
getisgrid$HOTSPOT = as.vector(localG(getisgrid$layer, weighted_neighbors))
getisgrid = getisgrid %>% st_as_sf()
# tm_shape(st_read('Data/bg_atl_socio.shp') %>% filter(GEOID %in% unique(POINodes$label))) +
#   tm_polygons(alpha=0, border.col = 'black', border.alpha=0.1) +
tmap_mode('plot')
bgbox = st_bbox(data.frame(lon=c(-74.10039, -73.78967+0.2), lat=c(40.57224 + 0.01, 40.9638)) %>%
st_as_sf(coords=c('lon', 'lat'), crs=4326)) %>% st_as_sfc()
bgbox = st_bbox(st_transform(bgbox, crs=32118))
bgbox = st_bbox(heat)
bg = basemap_stars(bgbox, map_service = 'carto')
g=tm_shape(bg) +
tm_rgb(alpha=0.8) +
tm_shape(cbgshp %>% st_union(by_feature = FALSE)) +
tm_polygons(alpha=0, border.col = 'black', border.alpha = 0.2, lwd=2) +
tm_shape(getisgrid %>% filter(HOTSPOT <= 1.65 | is.na(HOTSPOT))) +
tm_polygons(alpha=0, border.col='grey') +
tm_shape(getisgrid %>% filter(HOTSPOT > 1.65)) +
tm_polygons(alpha=0, border.col='darkred', lwd=3) +
# tm_shape(edgeWithin %>% filter(WithinWindow == 1)) +
# tm_lines(alpha=0.5) +
tm_shape(heat %>% filter(heat <= breaks[[3]] | is.na(heat))) +
tm_symbols(size=0.1, col='grey') +
tm_shape(heat %>% filter(heat > breaks[[3]])) +
tm_symbols(col='heat', size=0.22, style='fixed', legend.col.show = FALSE, palette = c('#FBD977', '#F78D3D', '#E3211B', '#800F26'), breaks=breaks) +
# tm_symbols(size=0.2, col='heat', style='fixed', breaks=c(0, 0.25, 0.5, 0.75, 1),
#            palette=c('#FFEDA0', '#FEB24B', '#E3211C', '#800F26')) +
tm_add_legend(type='symbol', labels=c(paste0('NA or <', breaks[[3]]), labels[c(3,4)]), col=c('grey', '#E3211B', '#800F26'),
title=paste0(legend_name, ' (D = ', dist, 'm)'), size=0.5) +
tm_add_legend("fill", labels=c('Insignificant', '90% Confidence Hot Spot'), alpha=0, border.col = c('grey', 'darkred'), border.lwd = c(1,3), title='Getis-Ord Gi* Hot Spot') +
#tm_add_legend("fill", labels=c('500m * 500m grid'), alpha=0, border.col='grey') +
tm_scale_bar(breaks=c(0, 1, 2, 4), text.size = 1) +
tm_layout(legend.title.size = 1.5, legend.text.size = 1.2, legend.width = 1) +
tm_layout(legend.bg.color = 'white', legend.bg.alpha = 0.7,
main.title = Gioutput,
main.title.position = c('center'))
g
tmap_save(g, filename=paste0('Figs/NewYork/0330/', output, Gioutput, '.png'), unit='in', dpi=600)
setwd('/Users/xiaofanliang/Dropbox (GaTech)/GT_Research/Edge_Scan/')
library(tidyverse)
library(sf)
library(tmap)
library(dplyr)
library(SSNtools)
library(basemaps)
data(POINodes)
data(POIEdges)
nodes = processNode(POINodes, 'label', 'LonX', 'LatY', 'Bipartite')
edges = processEdge(POIEdges, 'Source', 'Target', 'Weight')
temp2 = NDScanKNearest(nodes, edges, 5, directed=FALSE, bipartite=TRUE)
heat2 = temp2[[1]]
edgeWithin2 = temp2[[2]]
heat = heat2
edgeWithin = edgeWithin2
# Create a regular grid of 100
pixelsize = 500
heat = heat %>% left_join(POINodes, copu=FALSE) %>% st_as_sf(coords=c('LonX', 'LatY'), crs=26967)
box = round(extent(heat) / pixelsize) * pixelsize
template = raster(box, crs = 26967,
nrows = (box@ymax - box@ymin) / pixelsize,
ncols = (box@xmax - box@xmin) / pixelsize)
heat$PRESENT = 1
getisraster = rasterize(heat, template, field = 'PRESENT', fun = sum)
getisgrid = rasterToPolygons(getisraster)
tmap_mode('view')
tm_shape(heat) +
tm_symbols(size=0.01) +
tm_shape(getisgrid %>% st_as_sf()) +
tm_polygons(alpha=0)
# Create the list of neighbors
neighbors = poly2nb(getisgrid)
weighted_neighbors = nb2listw(neighbors, zero.policy=T)
# Perform the local G analysis (Getis-Ord GI*)
getisgrid$HOTSPOT = as.vector(localG(getisgrid$layer, weighted_neighbors))
getisgrid = getisgrid %>% st_as_sf()
# tm_shape(st_read('Data/bg_atl_socio.shp') %>% filter(GEOID %in% unique(POINodes$label))) +
#   tm_polygons(alpha=0, border.col = 'black', border.alpha=0.1) +
tmap_mode('plot')
bg = basemap_stars(st_bbox(cbgshp), map_service = 'carto')
g=tm_shape(bg) +
tm_rgb(alpha=0.8) +
tm_shape(cbgshp %>% st_union(by_feature = FALSE)) +
tm_polygons(alpha=0, border.col = 'black', border.alpha = 0.2, lwd=2) +
tm_shape(getisgrid %>% filter(HOTSPOT <= 1.65 | is.na(HOTSPOT))) +
tm_polygons(alpha=0, border.col='grey') +
tm_shape(getisgrid %>% filter(HOTSPOT > 1.65)) +
tm_polygons(alpha=0, border.col='darkred', lwd=3) +
# tm_shape(edgeWithin %>% filter(WithinWindow == 1)) +
# tm_lines(alpha=0.5) +
tm_shape(heat %>% filter(heat <= breaks[[3]])) +
tm_symbols(size=0.1, col='grey') +
tm_shape(heat %>% filter(heat > breaks[[3]])) +
tm_symbols(col='heat', size=0.2, style='fixed', legend.col.show = FALSE, palette = c('#FBD977', '#F78D3D', '#E3211B', '#800F26'), breaks=breaks) +
# tm_symbols(size=0.2, col='heat', style='fixed', breaks=c(0, 0.25, 0.5, 0.75, 1),
#            palette=c('#FFEDA0', '#FEB24B', '#E3211C', '#800F26')) +
tm_add_legend(type='symbol', labels=c(paste0('<', breaks[[3]]), labels[c(3,4)]), col=c('grey', '#E3211B', '#800F26'), title=paste0(legend_name, ' (KNN = ', k, ')'), size=0.5) +
tm_add_legend("fill", labels=c('Insignificant', '90% Confidence'), alpha=0, border.col = c('grey', 'darkred'), border.lwd = c(1,3), title='Getis-Ord Gi* Hot Spot') +
#tm_add_legend("fill", labels=c('500m * 500m grid'), alpha=0, border.col='grey') +
tm_scale_bar(breaks=c(0, 1, 2, 4), text.size = 1) +
tm_layout(legend.title.size = 1.3, legend.text.size = 1, legend.width = 1) +
tm_layout(legend.bg.color = 'white', legend.bg.alpha = 0.7,
main.title = Gioutput,
main.title.position = c('center'))
tmap_save(g, filename=paste0('Figs/POI/KNN5_', Gioutput, '.png'), dpi=600)
setwd('/Users/xiaofanliang/Dropbox (GaTech)/GT_Research/Edge_Scan/')
library(SSNtools)
library(tidyverse)
library(sf)
library(tmap)
library(basemaps)
data(NYCMafiaNodes)
data(NYCMafiaEdges)
nodes = processNode(NYCMafiaNodes, 'label', 'LonX', 'LatY')
edges = processEdge(NYCMafiaEdges, 'Source', 'Target')
#---create edge line shapefiles -----#
library(stplanr)
NYCMafiaEdges_shp = od2line(NYCMafiaEdges, NYCMafiaNodes %>% st_as_sf(coords=c('LonX', 'LatY'), crs=32118))
dist = 1000
minPnts = 3
legend_name = 'Num of Edges'
output = 'EdgeScan'
breaks = c(0, 0.00001, 2, 5, 24)
labels = c('0', '(0, 2]', '(2, 5]', '(5, 24]')
temp = edgeScanRadius(nodes, edges, dist, min=minPnts)
heat1 = temp[[1]]
edgeWithin1 = temp[[2]]
Gioutput = c('NYC Mafia Network EdgeScan vs. Getis-Ord*')
heat = heat1
edgeWithin = edgeWithin1
# Create a regular grid of 100
pixelsize = 1000
heat = heat %>% left_join(NYCMafiaNodes, copu=FALSE) %>% st_as_sf(coords=c('LonX', 'LatY'), crs=32118)
box = round(extent(heat) / pixelsize) * pixelsize
template = raster(box, crs = 32118,
nrows = (box@ymax - box@ymin) / pixelsize,
ncols = (box@xmax - box@xmin) / pixelsize)
heat$PRESENT = 1
getisraster = rasterize(heat, template, field = 'PRESENT', fun = sum)
getisgrid = rasterToPolygons(getisraster)
tmap_mode('view')
tm_shape(heat) +
tm_symbols(size=0.01) +
tm_shape(getisgrid %>% st_as_sf()) +
tm_polygons(alpha=0)
# Create the list of neighbors
neighbors = poly2nb(getisgrid)
weighted_neighbors = nb2listw(neighbors, zero.policy=T)
# Perform the local G analysis (Getis-Ord GI*)
getisgrid$HOTSPOT = as.vector(localG(getisgrid$layer, weighted_neighbors))
getisgrid = getisgrid %>% st_as_sf()
# tm_shape(st_read('Data/bg_atl_socio.shp') %>% filter(GEOID %in% unique(POINodes$label))) +
#   tm_polygons(alpha=0, border.col = 'black', border.alpha=0.1) +
tmap_mode('plot')
bgbox = st_bbox(data.frame(lon=c(-74.10039, -73.78967+0.2), lat=c(40.57224 + 0.01, 40.9638)) %>%
st_as_sf(coords=c('lon', 'lat'), crs=4326)) %>% st_as_sfc()
bgbox = st_bbox(st_transform(bgbox, crs=32118))
bgbox = st_bbox(heat)
bg = basemap_stars(bgbox, map_service = 'carto')
g=tm_shape(bg) +
tm_rgb(alpha=0.8) +
tm_shape(cbgshp %>% st_union(by_feature = FALSE)) +
tm_polygons(alpha=0, border.col = 'black', border.alpha = 0.2, lwd=2) +
tm_shape(getisgrid %>% filter(HOTSPOT <= 1.65 | is.na(HOTSPOT))) +
tm_polygons(alpha=0, border.col='grey') +
tm_shape(getisgrid %>% filter(HOTSPOT > 1.65)) +
tm_polygons(alpha=0, border.col='darkred', lwd=3) +
# tm_shape(edgeWithin %>% filter(WithinWindow == 1)) +
# tm_lines(alpha=0.5) +
tm_shape(heat %>% filter(heat <= breaks[[3]] | is.na(heat))) +
tm_symbols(size=0.1, col='grey') +
tm_shape(heat %>% filter(heat > breaks[[3]])) +
tm_symbols(col='heat', size=0.22, style='fixed', legend.col.show = FALSE, palette = c('#FBD977', '#F78D3D', '#E3211B', '#800F26'), breaks=breaks) +
# tm_symbols(size=0.2, col='heat', style='fixed', breaks=c(0, 0.25, 0.5, 0.75, 1),
#            palette=c('#FFEDA0', '#FEB24B', '#E3211C', '#800F26')) +
tm_add_legend(type='symbol', labels=c(paste0('NA or <', breaks[[3]]), labels[c(3,4)]), col=c('grey', '#E3211B', '#800F26'),
title=paste0(legend_name, ' (D = ', dist, 'm)'), size=0.5) +
tm_add_legend("fill", labels=c('Insignificant', '90% Confidence Hot Spot'), alpha=0, border.col = c('grey', 'darkred'), border.lwd = c(1,3), title='Getis-Ord Gi* Hot Spot') +
#tm_add_legend("fill", labels=c('500m * 500m grid'), alpha=0, border.col='grey') +
tm_scale_bar(breaks=c(0, 1, 2, 4), text.size = 1) +
tm_layout(legend.title.size = 1.5, legend.text.size = 1.2, legend.width = 1) +
tm_layout(legend.bg.color = 'white', legend.bg.alpha = 0.7,
main.title = Gioutput,
main.title.position = c('center'))
g
tmap_save(g, filename=paste0('Figs/NewYork/0330/', output, Gioutput, '.png'), unit='in', width = 6.6025, height=7.8394, dpi=600)
#NDScan
legend_name = 'Network Density'
output = 'NDScan'
breaks=c(0, 0.00001, 0.10, 0.25, 0.667)
labels = c('0', '(0, 0.10]', '(0.10, 0.25]', '(0.25, 0.667]')
temp = NDScanRadius(nodes, edges, dist, min=minPnts)
heat2 = temp[[1]]
edgeWithin2 = temp[[2]]
Gioutput = c('NYC Mafia Network NDScan vs. Getis-Ord*')
heat = heat2
edgeWithin = edgeWithin2
# Create a regular grid of 100
pixelsize = 1000
heat = heat %>% left_join(NYCMafiaNodes, copu=FALSE) %>% st_as_sf(coords=c('LonX', 'LatY'), crs=32118)
box = round(extent(heat) / pixelsize) * pixelsize
template = raster(box, crs = 32118,
nrows = (box@ymax - box@ymin) / pixelsize,
ncols = (box@xmax - box@xmin) / pixelsize)
heat$PRESENT = 1
getisraster = rasterize(heat, template, field = 'PRESENT', fun = sum)
getisgrid = rasterToPolygons(getisraster)
tmap_mode('view')
tm_shape(heat) +
tm_symbols(size=0.01) +
tm_shape(getisgrid %>% st_as_sf()) +
tm_polygons(alpha=0)
# Create the list of neighbors
neighbors = poly2nb(getisgrid)
weighted_neighbors = nb2listw(neighbors, zero.policy=T)
# Perform the local G analysis (Getis-Ord GI*)
getisgrid$HOTSPOT = as.vector(localG(getisgrid$layer, weighted_neighbors))
getisgrid = getisgrid %>% st_as_sf()
# tm_shape(st_read('Data/bg_atl_socio.shp') %>% filter(GEOID %in% unique(POINodes$label))) +
#   tm_polygons(alpha=0, border.col = 'black', border.alpha=0.1) +
tmap_mode('plot')
bgbox = st_bbox(data.frame(lon=c(-74.10039, -73.78967+0.2), lat=c(40.57224 + 0.01, 40.9638)) %>%
st_as_sf(coords=c('lon', 'lat'), crs=4326)) %>% st_as_sfc()
bgbox = st_bbox(st_transform(bgbox, crs=32118))
bgbox = st_bbox(heat)
bg = basemap_stars(bgbox, map_service = 'carto')
g=tm_shape(bg) +
tm_rgb(alpha=0.8) +
tm_shape(cbgshp %>% st_union(by_feature = FALSE)) +
tm_polygons(alpha=0, border.col = 'black', border.alpha = 0.2, lwd=2) +
tm_shape(getisgrid %>% filter(HOTSPOT <= 1.65 | is.na(HOTSPOT))) +
tm_polygons(alpha=0, border.col='grey') +
tm_shape(getisgrid %>% filter(HOTSPOT > 1.65)) +
tm_polygons(alpha=0, border.col='darkred', lwd=3) +
# tm_shape(edgeWithin %>% filter(WithinWindow == 1)) +
# tm_lines(alpha=0.5) +
tm_shape(heat %>% filter(heat <= breaks[[3]] | is.na(heat))) +
tm_symbols(size=0.1, col='grey') +
tm_shape(heat %>% filter(heat > breaks[[3]])) +
tm_symbols(col='heat', size=0.22, style='fixed', legend.col.show = FALSE, palette = c('#FBD977', '#F78D3D', '#E3211B', '#800F26'), breaks=breaks) +
# tm_symbols(size=0.2, col='heat', style='fixed', breaks=c(0, 0.25, 0.5, 0.75, 1),
#            palette=c('#FFEDA0', '#FEB24B', '#E3211C', '#800F26')) +
tm_add_legend(type='symbol', labels=c(paste0('NA or <', breaks[[3]]), labels[c(3,4)]), col=c('grey', '#E3211B', '#800F26'),
title=paste0(legend_name, ' (D = ', dist, 'm)'), size=0.5) +
tm_add_legend("fill", labels=c('Insignificant', '90% Confidence Hot Spot'), alpha=0, border.col = c('grey', 'darkred'), border.lwd = c(1,3), title='Getis-Ord Gi* Hot Spot') +
#tm_add_legend("fill", labels=c('500m * 500m grid'), alpha=0, border.col='grey') +
tm_scale_bar(breaks=c(0, 1, 2, 4), text.size = 1) +
tm_layout(legend.title.size = 1.5, legend.text.size = 1.2, legend.width = 1) +
tm_layout(legend.bg.color = 'white', legend.bg.alpha = 0.7,
main.title = Gioutput,
main.title.position = c('center'))
tmap_save(g, filename=paste0('Figs/NewYork/0330/', output, Gioutput, '.png'), unit='in', width = 6.6025, height=7.8394, dpi=600)
tmap_save(g, filename=paste0('Figs/NewYork/0330/', output, Gioutput, '.png'), unit='in', width = 6.6025, height=7.8394, dpi=600)
tmap_save(g, filename=paste0('Figs/NewYork/0330/', output, Gioutput, '.png'), unit='in', width = 6.6025, height=7.8394, dpi=600)
tmap_save(g, filename=paste0('Figs/NewYork/0330/', output, Gioutput, '.png'), unit='in', width = 6.6025, height=7.8394, dpi=600)
library(tidyverse)
library(sf)
library(openxlsx)
setwd('/Users/xiaofanliang/Dropbox (GaTech)/GT_Research/Miaoqianzhijie/')
#Export sociodemo.csv
data = read.xlsx('Results/Data/Results.xlsx',
sheet=1) %>%
dplyr::select(c(1, 2, 3, 4, 13, 22, 39, 48, 54, 55, 61, 62, 63, 70, 77)) %>%
mutate(Submitted = convertToDate(Submitted)) %>%
mutate(First.Active = convertToDate(First.Active)) %>%
slice(8, 26:166) %>% #row #8, and then starting from row #26 is the actual submission
dplyr::select(-c(Publication.ID, Submitted, First.Active))
colnames(data) = c('RespondentID', 'Age', 'Identity',
'Importance', 'InteractionYN', 'Subway',
'OwnerYN', 'Attitude', 'Info', '10-1', '10-2', '10-3')
data = data %>% mutate(Age = as.integer(Age), InteractionYN = as.integer(InteractionYN),
OwnerYN = as.integer(OwnerYN),
`10-1` = as.integer(`10-1`),
`10-2` = as.integer(`10-2`),
`10-3` = as.integer(`10-3`))
#Export visits.csv
sociodemo = read.csv('Results/Data/Sociodemo.csv') %>% mutate(RespondentID = as.character(RespondentID))
stores = st_read('Results/Data/stores_w_st.shp') %>% st_transform(crs=4326)
visits = read.xlsx('Results/Data/Results.xlsx', sheet=4) %>%
select(c(1, 10, 11, 23, 32, 40)) %>%
mutate(Respondent.ID = as.character(Respondent.ID)) %>%
filter(Respondent.ID %in% sociodemo$RespondentID) %>%
separate(`6..您一般会拜访庙前直街的哪些商铺？请点击地图上对应的商铺，并回答对应的问题。（可回答多次）`,
into=c('lat', 'lon'), sep=',') %>%
st_as_sf(coords=c('lon', 'lat'), crs=4326) %>%
#st_intersection point and stores polygon shapefiles to change the click point to store polygon centroids
st_join(stores %>% select(c(ID_key, geometry)), join=st_intersects) %>%
st_drop_geometry()
colnames(visits) = c('Respondent.ID', 'purpose', 'with_whom', 'rebuild', 'location', 'ID_key')
visits2 = read.xlsx('Results/走访组录入.xlsx', sheet=2)
colnames(visits2) = c('Respondent.ID', 'ID_key', 'purpose', 'with_whom', 'rebuild', 'location')
visits2 = visits2 %>%
filter(purpose != -1 & with_whom != -1 & rebuild != -1) %>%
mutate(Respondent.ID = as.character(Respondent.ID)) %>%
mutate(purpose = as.integer(purpose)) %>%
bind_rows(visits)
write.csv(visits2, 'Results/Data/visits.csv', row.names = F, fileEncoding = "UTF-8")
#Export home.csv
data2 = read.xlsx('Results/走访组录入.xlsx', sheet=4) %>%
filter(lon != '') %>%
mutate(Respondent.ID = as.character(Respondent.ID))
home = read.xlsx('Results/Data/Results.xlsx',
sheet=6) %>% drop_na(Respondent.ID) %>%
filter(Respondent.ID %in% sociodemo$RespondentID) %>%
slice(2:58) %>%
filter(!Respondent.ID %in% c('4j2zia7o3zvt', '4byx7x6goe3f', '7bbg78wyb9t6')) %>%
separate(`8..您居住在哪个地区？请您点击地图，并标记您居住地附近的地区。`, into=c('lat', 'lon'), sep=',') %>%
select(c(Respondent.ID, lat, lon)) %>%
mutate(lon=as.numeric(lon), lat=as.numeric(lat)) %>%
bind_rows(data2) %>%
mutate(LineID = row_number()) %>%
select(c(Respondent.ID, lon, lat))
write.csv(home, 'Results/Data/Home.csv', row.names = F, fileEncoding = "UTF-8")
#Export memory.csv
data2 = read.xlsx('Results/走访组录入.xlsx', sheet=3)
colnames(data2) = c('Respondent.ID', 'ID_key', 'Memories')
data2 = data2 %>% mutate(Respondent.ID = as.character(Respondent.ID)) %>%
drop_na(ID_key) %>%
mutate(ID_key = as.numeric(ID_key))
memories = read.xlsx('Results/Data/Results.xlsx',
sheet=5) %>% drop_na(Respondent.ID) %>%
filter(Respondent.ID %in% sociodemo$RespondentID) %>%
separate(`7..请点击庙前直街的任意地点并分享您的记忆（可回答多次）`,
into=c('lat', 'lon'), sep=',') %>%
st_as_sf(coords=c('lon', 'lat'), crs=4326) %>%
#st_intersection point and stores polygon shapefiles to change the click point to store polygon centroids
st_join(stores %>% select(c(ID_key, geometry)), join=st_intersects) %>%
select(c(Respondent.ID, ID_key, `请您详细描述与该商铺的记忆`)) %>%
rename(Memories = `请您详细描述与该商铺的记忆`) %>%
st_drop_geometry() %>%
bind_rows(data2)
write.csv(memories, 'Results/Data/memories.csv', row.names = F, fileEncoding = "UTF-8")
View(memories)
