library(SSNHotSpot)
?SSNHotSpot
install.packages('pacman')
pacman::p_load(knitr, rmarkdown, devtools, roxygen2, usethis)
usethis::use_git_config(user.name = "xiaofanliang", user.email = "liangxiaofan2012@gmail.com")
SSNHotSpot::
SSNHotSpot::pacman::p_functions(SSNHotSpot)
pacman::p_functions("SSNHotSpot")
here::here()
if (!require("pacman")) install.packages("pacman")
pacman::p_load(magrittr, dplyr, usethis, data.table, here)
here::here()
nodes <- read.csv(here::here("data-raw", "Filtered_MafiaNodes.csv"))
install.packages('rprojroot')
install.packages("rprojroot")
if (!require("pacman")) install.packages("pacman")
pacman::p_load(magrittr, dplyr, usethis, data.table, here)
nodes <- read.csv(here::here("data-raw", "Filtered_MafiaNodes.csv"))
edges <- read.csv(here::here("data-raw", "Filtered_MafiaEdges.csv"))
user_nodes <- read.csv(here::here("data-raw", "Filtered_MafiaNodes.csv"))
user_edges <- read.csv(here::here("data-raw", "Filtered_MafiaEdges.csv"))
usethis::use_data(user_nodes, overrite=TRUE)
usethis::use_data(user_nodes)
usethis::use_data(user_edges)
# load required packages ----
if (!require("pacman")) install.packages("pacman")
pacman::p_load(magrittr, dplyr, usethis, data.table, here)
#------Each node is stored a named list ------#
#------nodes is a list of named list ---------#
#=-----The process returns a list of named lists with the named key as label
user_nodes <- read.csv(here::here("data-raw", "Filtered_MafiaNodes.csv"))
user_edges <- read.csv(here::here("data-raw", "Filtered_MafiaEdges.csv"))
usethis::use_data(user_nodes, overwrite = TRUE)
usethis::use_data(user_edges, overwrite = TRUE)
pacman::p_load(sinew)
sinew::makeOxyFile("R/SSNHotSpot.R")
usethis::use_package("utils", type = "Imports")
devtools::check()
devtools::check()
usethis::use_vignette(name = "Introduction to SSNHotSpot")
usethis::use_vignette(name = "SSNHotSpot")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
data("user_nodes")
nrow(user_nodes)
result <- edgeScanRadius(nodes, edges, 500)
nodes <- processNode(user_nodes, 'label', 'lon', 'lat')
edges <- processEdge(user_edges, 'Source', 'Target')
result <- edgeScanRadius(nodes, edges, 500)
nrow(result)
nrow(nodes)
nodes <- processNode(user_nodes, 'label', 'lon', 'lat')
nrow(nodes)
nrow(user_nodes)
kk = processNode(nodes, 'label', 'lon', 'lat')
nrow(nodes)
kk = processNode(nouser_nodes, 'label', 'lon', 'lat')
kk = processNode(user_nodes, 'label', 'lon', 'lat')
nrow(kk)
user_nodes %>% slice(1)
names(user_nodes)[names(user_nodes) == 'label'] <- 'label'
user_nodes %>% slice(1)
processNode = function(data, label_name, lon_name, lat_name) {
#convert columns to the right data format
names(data)[names(data) == label_name] <- "label"
names(data)[names(data) == lon_name] <- "lon"
names(data)[names(data) == lat_name] <- "lat"
data$label = as.character(data$label)
data$lon = as.numeric(as.character(data$lon))
data$lat = as.numeric(as.character(data$lat))
#convert data frame to a list of named lists
data2 = as.list(data)
nodes = list()
for (i in 1:nrow(data)) {
temp = list()
node = list('label' = data$label[i], 'lon' = data2$lon[i], 'lat'= data2$lat[i])
temp[[label]] <- node #this is the only way to assign key by variable name
nodes = append(nodes, temp)
}
return(nodes)
}
kk = processNode(user_nodes, 'label', 'lon', 'lat')
processNode = function(data, label_name, lon_name, lat_name) {
#convert columns to the right data format
names(data)[names(data) == label_name] <- "label"
names(data)[names(data) == lon_name] <- "lon"
names(data)[names(data) == lat_name] <- "lat"
data$label = as.character(data$label)
data$lon = as.numeric(as.character(data$lon))
data$lat = as.numeric(as.character(data$lat))
#convert data frame to a list of named lists
data2 = as.list(data)
nodes = list()
for (i in 1:nrow(data)) {
temp = list()
node = list('label' = data2$label[i], 'lon' = data2$lon[i], 'lat'= data2$lat[i])
temp[[label]] <- node #this is the only way to assign key by variable name
nodes = append(nodes, temp)
}
return(nodes)
}
kk = processNode(user_nodes, 'label', 'lon', 'lat')
processNode = function(data, label_name, lon_name, lat_name) {
#convert columns to the right data format
names(data)[names(data) == label_name] <- "label"
names(data)[names(data) == lon_name] <- "lon"
names(data)[names(data) == lat_name] <- "lat"
data$label = as.character(data$label)
data$lon = as.numeric(as.character(data$lon))
data$lat = as.numeric(as.character(data$lat))
#convert data frame to a list of named lists
data2 = as.list(data)
nodes = list()
for (i in 1:nrow(data)) {
temp = list()
label = as.character(data2$label[i])
node = list('label' = label, 'lon' = data2$lon[i], 'lat'= data2$lat[i])
temp[[label]] <- node #this is the only way to assign key by variable name
nodes = append(nodes, temp)
print(nodes[['label']])
}
return(nodes)
}
processNode(user_nodes, 'label', 'lon', 'lat')
processNode = function(data, label_name, lon_name, lat_name) {
i=0
#convert columns to the right data format
names(data)[names(data) == label_name] <- "label"
names(data)[names(data) == lon_name] <- "lon"
names(data)[names(data) == lat_name] <- "lat"
data$label = as.character(data$label)
data$lon = as.numeric(as.character(data$lon))
data$lat = as.numeric(as.character(data$lat))
#convert data frame to a list of named lists
data2 = as.list(data)
nodes = list()
for (i in 1:nrow(data)) {
temp = list()
label = as.character(data2$label[i])
node = list('label' = label, 'lon' = data2$lon[i], 'lat'= data2$lat[i])
temp[[label]] <- node #this is the only way to assign key by variable name
nodes = append(nodes, temp)
i = i+ 1
}
print(i)
return(nodes)
}
processNode(user_nodes, 'label', 'lon', 'lat')
kk = processNode(user_nodes, 'label', 'lon', 'lat')
nrow(user_nodes)
processNode = function(data, label_name, lon_name, lat_name) {
i=0
#convert columns to the right data format
names(data)[names(data) == label_name] <- "label"
names(data)[names(data) == lon_name] <- "lon"
names(data)[names(data) == lat_name] <- "lat"
data$label = as.character(data$label)
data$lon = as.numeric(as.character(data$lon))
data$lat = as.numeric(as.character(data$lat))
#convert data frame to a list of named lists
data2 = as.list(data)
nodes = list()
for (i in 1:nrow(data)) {
temp = list()
label = as.character(data2$label[i])
node = list('label' = label, 'lon' = data2$lon[i], 'lat'= data2$lat[i])
temp[[label]] <- node #this is the only way to assign key by variable name
nodes = append(nodes, temp)
i = i+ 1
}
print(nrow(nodes))
return(nodes)
}
kk = processNode(user_nodes, 'label', 'lon', 'lat')
processNode = function(data, label_name, lon_name, lat_name) {
#convert columns to the right data format
names(data)[names(data) == label_name] <- "label"
names(data)[names(data) == lon_name] <- "lon"
names(data)[names(data) == lat_name] <- "lat"
data$label = as.character(data$label)
data$lon = as.numeric(as.character(data$lon))
data$lat = as.numeric(as.character(data$lat))
#convert data frame to a list of named lists
data2 = as.list(data)
nodes = list()
for (i in 1:3) { #nrow(data)
temp = list()
label = as.character(data2$label[i])
node = list('label' = label, 'lon' = data2$lon[i], 'lat'= data2$lat[i])
temp[[label]] <- node #this is the only way to assign key by variable name
nodes = append(nodes, temp)
}
print(nodes)
return(nodes)
}
processNode(user_nodes, 'label', 'lon', 'lat')
kk = processNode(user_nodes, 'label', 'lon', 'lat')
kk[['TANTILLO-ENRICO']]
nrow(nodes)
length(nodes)
devtools::check()
devtools::check()
library(SSNHotSpot)
nrow(user_nodes)
devtools::check()
devtools::check()
if (!require("pacman")) install.packages("pacman")
pacman::p_load(magrittr, dplyr, usethis, data.table, here)
#------Each node is stored a named list ------#
#------nodes is a list of named list ---------#
#=-----The process returns a list of named lists with the named key as label
example_nodes <- read.csv(here::here("data-raw", "Filtered_MafiaNodes.csv"))
example_edges <- read.csv(here::here("data-raw", "Filtered_MafiaEdges.csv"))
usethis::use_data(example_nodes, overwrite = TRUE)
usethis::use_data(example_edges, overwrite = TRUE)
devtools::check()
library(SSNHotSpot)
nrow(example_nodes)
nrow(user_nodes)
nodes = processNode(example_nodes, 'label', 'lon', 'lat')
kk = NDScanRadius(example_nodes, example_edges, 500)
edges = processEdge(example_edges, 'Source', 'Target')
kk = NDScanRadius(nodes, edges, 500)
nrow(kk)
View(kk)
is.list(nodes)
length(nodes)
devtools::check()
library(SSNHotSpot)
nodes = processNode(example_nodes, 'label', 'lon', 'lat')
edges = processNode(example_edges, 'Source', 'Target')
edges = processEdge(example_edges, 'Source', 'Target')
kk = edgeScanRadius(example_nodes, edges, 500)
if((!is.list(example_nodes) & length(example_nodes) < 2) | (!is.list(edges) & length(edges) < 2)) {
stop('nodes or edges need to be a list of lists. Please use processNode or processEdge to convert R dataframe to a list of lists')
}
if(1!=2) {}
if(1!=2) {stop('hi')}
!is.list(example_nodes) & length(example_nodes) < 2
library(SSNHotSpot)
nodes = processNode(example_nodes, 'label', 'lon', 'lat')
edges = processNode(example_edges, 'Source', 'Target')
edges = processEdge(example_edges, 'Source', 'Target')
kk = edgeScanRadius(example_nodes, edges, 500)
!is.list(example_nodes) } !is.list(edges)
!is.list(example_nodes) | !is.list(edges)
!is.list(example_nodes)
kk = example_nodes
View(kk)
is.list(example_nodes)
is.list(nodes)
library(SSNHotSpot)
nodes = processNode(example_nodes, 'label', 'lon', 'lat')
edges = processNode(example_edges, 'Source', 'Target')
edges = processEdge(example_edges, 'Source', 'Target')
kk = edgeScanRadius(example_nodes, edges, 500)
!inherits(nodes, "list")
inherits(nodes, "list")
inherits(example_nodes, "list")
if(FALSE | TRUE) {print('hi')}
!inherits(example_nodes, "list")
if(!inherits(example_nodes, "list") | !inherits(edges, "list")){print('hi')}
kk = edgeScanRadius(example_nodes, edges, 500)
kk = edgeScanRadius(example_nodes, edges, 500)
devtools::check()
library(SSNHotSpot)
kk = edgeScanRadius(example_nodes, example_edges, 500)
library(SSNHotSpot)
kk = edgeScanRadius(example_nodes, example_edges, 500)
library(SSNHotSpot)
install.packages('SSNHotSpot')
install.packages("SSNHotSpot")
rmarkdown::render("README.Rmd")
devtools::install_github("friendlycities-gatech/SSNHotSpot")
devtools::install_github("friendlycities-gatech/SSNHotSpot")
devtools::install_github('walkerke/tigris')
devtools::install_github("friendlycities-gatech/SSNHotSpot")
options(download.file.method = "libcurl")
devtools::install_github("friendlycities-gatech/SSNHotSpot")
library(SSNHotSpot)
devtools::check()
library(SSNtools)
rmarkdown::render("README.Rmd")
rmarkdown::render("README.Rmd")
rmarkdown::render("README.Rmd")
rmarkdown::render("README.Rmd")
devtools::check()
devtools::check()
rmarkdown::render("README.Rmd")
output: rmarkdown::github_document
output: rmarkdown::github_document
rmarkdown::render("README.Rmd")
rmarkdown::render("README.Rmd")
output: rmarkdown::github_document
output: rmarkdown::github_document
rmarkdown::render("README.Rmd")
library(SSNtools)
library(SSNtools)
nrow(MafiaNodes)
devtools::check()
devtools::check()
library(SSNtools)
nrow(MafiaNodes)
nrow(NYCMafiaNodes)
devtools::check()
if (!require("pacman")) install.packages("pacman")
pacman::p_load(usethis, here)
#------Each node is stored a named list ------#
#------nodes is a list of named list ---------#
#=-----The process returns a list of named lists with the named key as label
NYCMafiaNodes <- read.csv(here::here("data-raw", "Filtered_MafiaNodes.csv"))
NYCMafiaEdges <- read.csv(here::here("data-raw", "Filtered_MafiaEdges.csv"))
usethis::use_data(NYCMafiaNodes, overwrite = TRUE)
usethis::use_data(NYCMafiaEdges, overwrite = TRUE)
MafiaNodes <- read.csv(here::here("data-raw", "MafiaNodes.csv"))
MafiaEdges <- read.csv(here::here("data-raw", "MafiaEdges.csv"))
usethis::use_data(MafiaNodes, overwrite = TRUE)
usethis::use_data(MafiaEdges, overwrite = TRUE)
devtools::check()
devtools::check()
devtools::check()
library(SSNtools)
nrow(MafiaNodes)
rmarkdown::render("README.Rmd")
rmarkdown::render("README.Rmd")
# load required packages ----
if (!require("pacman")) install.packages("pacman")
pacman::p_load(usethis, here)
#------Each node is stored a named list ------#
#------nodes is a list of named list ---------#
#=-----The process returns a list of named lists with the named key as label
NYCMafiaNodes <- read.csv(here::here("data-raw", "Filtered_MafiaNodes.csv"))
NYCMafiaEdges <- read.csv(here::here("data-raw", "Filtered_MafiaEdges.csv"))
usethis::use_data(NYCMafiaNodes, overwrite = TRUE)
usethis::use_data(NYCMafiaEdges, overwrite = TRUE)
MafiaNodes <- read.csv(here::here("data-raw", "MafiaNodes.csv"))
MafiaEdges <- read.csv(here::here("data-raw", "MafiaEdges.csv"))
usethis::use_data(MafiaNodes, overwrite = TRUE)
usethis::use_data(MafiaEdges, overwrite = TRUE)
library(SSNtools)
devtools::test()
install.packages("SSNtools")
library(SSNtools)
library(igraph)
library(tidyverse)
library(igraph)
library(tmap)
nodes = processNode(NYCMafiaNodes, 'label', 'LonX', 'LatY')
edges = processEdge(NYCMafiaEdges, 'Source', 'Target')
MafiaSpatial = NYCMafiaNodes %>%
st_as_sf(coords=c("LonX", "LatY"), crs = 4326)
library(sf)
MafiaSpatial = NYCMafiaNodes %>%
st_as_sf(coords=c("LonX", "LatY"), crs = 4326)
setwd('/Users/xiaofanliang/Dropbox (GaTech)/GT_Research/Edge_Scan/')
library(SSNtools)
library(tidyverse)
library(sf)
library(tmap)
NYCMafiaNodes = NYCMafiaNodes
NYCMafiaEdges = NYCMafiaEdges
nodes = processNode(NYCMafiaNodes, 'NODE', 'LonX', 'LatY')
edges = processEdge(MafiaEdges, 'Source', 'Target')
result = NDScanRadius(nodes, edges, 500)
setwd('/Users/xiaofanliang/Dropbox (GaTech)/GT_Research/Edge_Scan/')
library(SSNtools)
library(tidyverse)
library(sf)
library(tmap)
NYCMafiaNodes = NYCMafiaNodes
NYCMafiaEdges = NYCMafiaEdges
nodes = processNode(NYCMafiaNodes, 'label', 'LonX', 'LatY')
edges = processEdge(NYCMafiaEdges, 'Source', 'Target')
result = NDScanRadius(nodes, edges, 500)
MafiaSpatial = result %>% left_join(NYCMafiaNodes, by=c('label'), copy=FALSE) %>%
st_as_sf(coords=c('LonX', 'LatY'), crs=32118)
tmap_mode('view')
tm_shape(MafiaSpatial) +
tm_symbols()
setwd('/Users/xiaofanliang/Dropbox (GaTech)/GT_Research/Edge_Scan/')
library(SSNtools)
library(tidyverse)
library(sf)
library(tmap)
NYCMafiaNodes = NYCMafiaNodes
NYCMafiaEdges = NYCMafiaEdges
nodes = processNode(NYCMafiaNodes, 'label', 'LonX', 'LatY')
edges = processEdge(NYCMafiaEdges, 'Source', 'Target')
result = NDScanRadius(nodes, edges, 500, min=4)
